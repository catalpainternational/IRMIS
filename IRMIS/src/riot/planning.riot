<planning>
    <feedback_banner if="{ state.showFeedback }" close="{ closeFeedback }"
        successmessage="{ window.gettext('You have successfully saved') }"
        errormessage="{ window.gettext('Something went wrong') }" error="{ state.error }">
    </feedback_banner>
    <header class="align-items-center d-flex justify-content-between">
        <h1>{ window.gettext("Detailed Plans and Budgets") }</h1>
        <button if={window.canEditPlans} class="btn btn-primary" onclick="{ addPlan }">
            { window.gettext("Upload 5-Year Plan") }
        </button>
    </header>

    <div class="content-wrapper">
        <h5>{ window.gettext("List of plans") }</h5>
        <data_table tableid="{ data_table_id }" columns="{ data_table_columns }" cssclass="planning-table"
            columnsortorder="{ data_table_columns_order }" pendingrows="{ state.pendingRows }"
            candelete="{ true }" canorder="{ true }">
        </data_table>
    </div>

    <edit_modal modalid="{ modal_id }" disablesave="{ !state.canSave }">
        <span slot="modal_title">{window.gettext("Upload 5-Year Plan")}</span>

        <form slot="modal_body">
            <section>
                <p>{ window.gettext('Select the Excel file with the plan you prepared using the template and upload it here. Enter a simple and descriptive title, for example "5-year Plan for National Roads 2020-2024". Once the plan is approved, you can mark it as "Approved" on the plans list using the check box') }.</p>


                <div class="form-group position-relative">
                    <label>{ window.gettext("Choose Excel File") }</label>
                    <p if="{ state.hasFile }" class="file-name">{ state.editingPlan.fileName }</p>
                    <input type="file" name="file" oninput="{ checkPlanFile }"
                        accept="application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                        required>
                    <div if="{ state.errors.file }" class="invalid-tooltip">
                        <ul>
                            <li>{ state.errors.file }</li>
                        </ul>
                    </div>
                </div>

                <div class="form-group">
                    <label>{ window.gettext("Title") }</label>
                    <span class="required">*</span>
                    <small class="form-text text-muted">{ window.gettext("Enter the plan title") }</small>
                    <input
                        class="{ state.errors.title ? 'danger' : null } { state.editingPlan.title ? '' : 'inactive' } form-control"
                        type="text" name="title" placeholder="Title" value="{state.editingPlan.title}"
                        oninput="{ checkPlanTitle }" required>
                    <div if="{ state.errors.title }" class="invalid-tooltip">
                        <ul>
                            <li>{ state.errors.title }</li>
                        </ul>
                    </div>
                </div>
            </section>
            <div class="d-flex justify-content-end">
                <span>[</span><span class="required">*</span><span>]: Mandatory</span>
            </div>
        </form>
    </edit_modal>

    <edit_stop_alert modalid="{ delete_modal_id }" title="{ window.gettext('Delete') }"
        description="{ window.gettext('Are you sure you want to delete this plan?') }"
        proceedlabel="{ window.gettext('Delete') }" proceedresult="delete" stoplabel="{ window.gettext('Don\'t delete') }"
        stopresult="keep">
    </edit_stop_alert>

    <script>
        import {createPlan, approvePlan, deletePlan, getPlans, updatePlan} from "../planManager";
        import {EstradaPlan, makeEstradaPlan} from "../assets/models/plan";

        import Data_Table from "./data_table.riot";
        import Feedback_Banner from './feedback_banner.riot';
        import Edit_Modal from "./edit_modal.riot";
        import Edit_Stop_Alert from "./edit_stop_alert.riot";

        import $ from "jquery";
        import dayjs from "dayjs";

        export default {
            modal_id: "edit-plan-modal",
            delete_modal_id: "delete-alert",
            state: {
                plans: [],
                pendingRows: [],
                editingPlan: new EstradaPlan({}),
                basePlan: new EstradaPlan({}),
                errors: {},
                canSave: false,
                showFeedback: false,
            },
            components: {
                Feedback_Banner,
                Edit_Modal,
                Edit_Stop_Alert,
                Data_Table,
            },
            data_table_id: "plans-datatable",
            data_table_columns: [
                {
                    title: window.gettext("Approved"),
                    data: 'approved',
                    defaultContent: "",
                    render: (data, type, row) => {
                        const selected = (data) ? "selected" : "";
                        return (window.canEditPlans) ? `<a class="image checkbox ${selected} data-id="${row.id}" data-approved="${data}" onClick="
                                document.dispatchEvent(new CustomEvent('plans-datatable.approveRow', {detail: {rowId: ${row.id}, tableId: 'plans-datatable'}}))
                                "></a>` : `<span class="image checkbox ${selected}"></span>`;
                    },
                    className: "text-center",
                    orderable: false,
                },
                {
                    title: window.gettext("Title"),
                    data: 'title',
                    defaultContent: "",
                    orderable: true,
                },
                {
                    title: window.gettext("Asset Class"),
                    data: 'assetClass',
                    defaultContent: "",
                    orderable: true,
                },
                {
                    title: window.gettext("Planning Period"),
                    data: 'planningPeriod',
                    defaultContent: "",
                    orderable: true,
                },
                {
                    title: window.gettext("Date Uploaded"),
                    data: 'dateCreated',
                    defaultContent: "",
                    orderable: true,
                },
                {
                    title: window.gettext("Added By"),
                    data: 'addedBy',
                    defaultContent: "",
                    orderable: true,
                },
                {
                    title: "",
                    data: null,
                    render: (data, type, row) => {
                        return (row.url) ? `<a class="image document" href="${row.url}" download="${row.fileName}"></a>` : "";
                    },
                    className: "text-center",
                    orderable: false,
                },
            ],
            data_table_columns_order: [[3, 'desc']],
            onBeforeMount(props, state) {
                if (window.canEditPlans) {
                    if (this.data_table_columns.length <= 7) {
                        this.data_table_columns.push({
                            title: "",
                            data: null,
                            render: (data, type, row) => {
                                let links = [];
                                if (row.addedBy) {
                                    const editEvent = `document.dispatchEvent(new CustomEvent('plans-datatable.editRow', {detail: {rowId: ${row.id}, tableId: 'plans-datatable'}}))`;
                                    links.push(`<a class="image pencil" href="#planning/plans" onClick="${editEvent}"></a>`);
                                    const deleteEvent = `document.dispatchEvent(new CustomEvent('plans-datatable.deleteRow', {detail: {rowId: ${row.id}, tableId: 'plans-datatable'}}))`;
                                    links.push(`<a class="image delete" onClick="${deleteEvent}"></a>`);
                                }
                                return links.join("<span></span>");
                            },
                            orderable: false,
                        });
                    }
                }
            },
            onMounted(props, state) {
                this.getPlans();

                this.deleteListener = (data) => {
                    const tableId = data.detail.tableId;
                    const rowId = data.detail.rowId;
                    this.showStopAlertModal("delete-alert", rowId, tableId);
                };
                document.addEventListener(`${this.data_table_id}.deleteRow`, this.deleteListener);

                this.editListener = (data) => {
                    const rowId = data.detail.rowId;
                    const plan = this.state.pendingRows.filter((p) => {return p.id == rowId});
                    if (plan.length) {
                        this.initPlan(plan[0])
                        this.state.hasFile = true;
                        this.update();
                        this.showEditModal();
                    }
                };
                document.addEventListener(`${this.data_table_id}.editRow`, this.editListener);

                this.approveListener = (data) => {
                    const rowId = data.detail.rowId;
                    const plan = this.state.pendingRows.filter((p) => {return p.id == rowId});
                    if (plan.length) {
                        plan[0].setApproved(!plan[0].approved);
                        this.initPlan(plan[0])
                        this.approvePlan();
                    }
                }
                document.addEventListener(`${this.data_table_id}.approveRow`, this.approveListener)
            },
            onUnmount(props, state) {
                document.removeEventListener(`${this.data_table_id}.deleteRow`, this.deleteListener);
                document.removeEventListener(`${this.data_table_id}.editRow`, this.editListener);
                document.removeEventListener(`${this.data_table_id}.approveRow`, this.approveListener)
            },
            addPlan(e) {
                this.state.editingPlan = new EstradaPlan({});
                this.state.hasFile = false;
                this.state.errors = {};
                this.update();
                this.showEditModal();
            },
            initPlan(plan) {
                this.state.basePlan = plan;
                this.state.editingPlan = makeEstradaPlan(this.state.basePlan);
            },
            showEditModal() {
                document.addEventListener(`${this.modal_id}.result`, (data) => {
                    const modalResult = data.detail.result;
                    if (modalResult === "save" && this.hasChanges()) {
                        this.savePlan();
                    }
                    this.discardChanges();
                }, {once: true});

                $(`#${this.modal_id}`).modal("show");
            },
            showStopAlertModal(modalId, rowId, tableId) {
                const eventName = `edit.${modalId}.result`;

                document.addEventListener(eventName, (data) => {
                    const stopAlertResult = data.detail.result;
                    $(`#${modalId}`).modal("hide");

                    if (stopAlertResult === "discard") {
                        this.discardChanges();
                    } else if (stopAlertResult === "delete") {
                        this.state.editMode = true;
                        // Coming out of the stop-alert modal we want to re-establish the data-table
                        const eventName = `${tableId}.getRowData`;
                        const eventDetail = {detail: {rowId: rowId, state: this.state}};
                        document.dispatchEvent(new CustomEvent(eventName, eventDetail));

                        if (this.state.currentRowData) {
                            this.state.editingPlan = this.state.currentRowData;
                            this.state.editingPlan.setId(rowId);
                            this.deletePlan(rowId);
                        }
                        this.state.editMode = false;
                    } else if (stopAlertResult === "continueEdit") {
                        this.showEditModal();
                    }
                }, {once: true});

                $(`#${modalId}`).modal("show");
            },
            hasChanges() {
                if (this.state.editingPlan.id == 0) {
                    return true;
                } else {
                    if (this.state.editingPlan.title !== this.state.basePlan.title) {
                        return true;
                    }
                }
                return false;
            },
            discardChanges() {
                let fileField = this.$("input[type='file']");
                if (fileField) {fileField.value = "";}
                $(`#${this.modal_id}`).modal("hide");
                this.update({
                    editingPlan: new EstradaPlan({}),
                    basePlan: new EstradaPlan({}),
                    errors: {},
                    canSave: false,
                });
            },
            checkPlanFile(e) {
                const allowed_types = ["application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"];
                const fieldName = e.currentTarget.name;
                const value = e.currentTarget.value.trim();
                const file = e.currentTarget.files[0];
                let testResult = false;
                let errorText = "";

                if (e.currentTarget.files.length == 0) {
                    errorText = window.gettext("You need to provide a Plan file");
                } else if (file) {
                    if (allowed_types.indexOf(file.type) == -1) {
                        errorText = window.gettext("Incorrect file type. Must be an Excel file.");
                    } else if (file.size > 20 * 1024 * 1024) {
                        errorText = window.gettext("Exceeded size limit of 20MB");
                    } else {
                        testResult = true;
                    }
                }
                if (!testResult) {
                    this.state.hasFile = false;
                } else if (testResult && file) {
                    const reader = new FileReader();
                    reader.readAsArrayBuffer(file);
                    reader.onloadend = (ev) => {
                        const bytes = new Uint8Array(reader.result);
                        this.state.editingPlan.setFile(bytes);
                    };
                    this.state.hasFile = true;
                    this.state.editingPlan.setFileName(file.name);
                }

                this.validate(fieldName, value, testResult, errorText);
            },
            checkPlanTitle(e) {
                const fieldName = e.currentTarget.name;
                const value = e.currentTarget.value.trim();
                const testResult = value.length !== 0;
                const errorText = window.gettext("You need to provide a plan title");

                this.validate(fieldName, value, testResult, errorText);
            },
            validate(fieldName, input, testResult, errorText) {
                if (!testResult) {
                    this.state.errors[fieldName] = errorText;
                } else {
                    delete this.state.errors[fieldName];
                    this.state.editingPlan[fieldName] = input;
                }
                this.canSave();
            },
            canSave() {
                const requiredFields = ["title", "fileName"].filter((fieldName) => {return !this.state.editingPlan[fieldName];}).length;

                if (requiredFields || Object.keys(this.state.errors).length) {
                    this.state.canSave = false;
                } else {
                    this.state.canSave = true;
                }

                this.update();
            },
            showFeedback(error) {
                this.update({
                    showfeedback: true,
                    error: error,
                });
                setTimeout(() => this.closeFeedback(), 2000);
            },
            closeFeedback() {
                const feedback = document.getElementsByClassName("slide-in").item(0);

                if (feedback) {
                    feedback.classList.add("slide-out");
                    setTimeout(() => {
                        feedback.classList.remove("slide-out");
                        this.update({ showfeedback: false });
                    }, 300);
                }
            },
            getPlans() {
                getPlans()
                    .then((plansData) => {
                        if (plansData) {
                            this.state.plans = plansData;
                            this.state.pendingRows = plansData;
                            const eventName = `${this.data_table_id}.dataAdded`;
                            const eventDetail = {detail: {pendingRows: this.state.pendingRows, clearRows: true}};
                            document.dispatchEvent(new CustomEvent(eventName, eventDetail));
                        } else {
                            this.showFeedback(true);
                        }
                    }).catch((err) => {
                        this.showFeedback(true);
                        console.log(`Getting the plans list failed: ${err}`);
                    }).finally(() => {
                        this.update();
                    });
            },
            savePlan() {
                $("#planning-loading").modal("show");
                let plan = this.state.editingPlan;
                if (plan.id === 0) {
                    createPlan(plan)
                        .then((planData) => {
                            this.state.pendingRows.push(planData);
                            const eventName = `${this.data_table_id}.dataAdded`;
                            const eventDetail = {detail: {pendingRows: this.state.pendingRows}};
                            document.dispatchEvent(new CustomEvent(eventName, eventDetail));
                            this.showFeedback();
                        }).catch(error => {
                            this.showFeedback(true);
                        }).finally((r) => {
                            $("#planning-loading").modal("hide");
                            this.update();
                        });
                } else {
                    updatePlan(plan)
                        .then((planData) => {
                            const planIndex = this.state.pendingRows.findIndex((obj => obj.id == planData.id));
                            this.state.pendingRows[planIndex] = planData;

                            const eventName = `${this.data_table_id}.dataAdded`;
                            const eventDetail = {detail: {pendingRows: this.state.pendingRows}};
                            document.dispatchEvent(new CustomEvent(eventName, eventDetail));
                            this.showFeedback();
                        }).catch(error => {
                            this.showFeedback(true);
                        }).finally((r) => {
                            $("#planning-loading").modal("hide");
                            this.update();
                        });
                }
            },
            approvePlan() {
                approvePlan(this.state.editingPlan)
                    .then((planData) => {
                        const planIndex = this.state.pendingRows.findIndex((obj => obj.id == planData.id));
                        this.state.pendingRows[planIndex] = planData;

                        const eventName = `${this.data_table_id}.dataAdded`;
                        const eventDetail = {detail: {pendingRows: this.state.pendingRows}};
                        document.dispatchEvent(new CustomEvent(eventName, eventDetail));
                        this.showFeedback();
                    }).catch(error => {
                        this.showFeedback(true);
                    }).finally((r) => {
                        this.update();
                    });
            },
            deletePlan(planId) {
                deletePlan(planId)
                    .then((planData) => {
                        const planIndex = this.state.pendingRows.findIndex((obj => obj.id == planData.id));
                        this.state.pendingRows.splice(planIndex, 1);
                        const eventName = `${this.data_table_id}.dataAdded`;
                        const eventDetail = {detail: {pendingRows: this.state.pendingRows}};
                        document.dispatchEvent(new CustomEvent(eventName, eventDetail));
                        this.showFeedback();
                    }).catch(error => {
                        this.showFeedback(true);
                    }).finally(() => {
                        this.update();
                    });
            },
            getHelpText(field) {
                return EstradaPlan.getHelpText(field);
            },
        }
    </script>
</planning>
