<edit_pavement>
    <h5>Pavement</h5>

    <edit_feedback if="{ state.show_feedback }" error="{ state.error }"></edit_feedback>

    <section>
        <div class="form-group">
            <label>{ pavements.display }</label>
            <select class="form-control" onchange="{checkPavementClass}">
                <option value="">{window.gettext("Select a Pavement Class")}</option>
                <option class="form-control" each={ p in pavements.options } value="{ p.code }" selected={ p.code == state.editingRoad.getPavementClass() }>
                    { p.name }
                </option>
            <small class="form-text text-muted">Choose the pavement of the road</small>
        </div>
        <div class="form-group">
            <label>{ surface_types.display }</label>
            <select class="form-control" onchange="{checkSurfaceType}">
                <option value="">{window.gettext("Select a Surface Type")}</option>
                <option class="form-control" each={ st in surface_types.options } value="{ st.code }" selected={ st.code == state.editingRoad.getSurfaceType() }>
                    { st.name }
                </option>
            <small class="form-text text-muted">Choose the surface type of the road</small>
        </div>
    </section>

    <div class="button-wrapper d-flex justify-content-end">
        <button class="btn btn-primary" onclick="{ save }">Save and continue</button>
    </div>

    <script>
        import { saveRoad } from "../roadManager";
        import Edit_Feedback from './edit_feedback.riot';
        import { Road } from "../../protobuf/roads_pb";

        export default {
            onBeforeMount(props, state) {
                state.editingRoad = Road.deserializeBinary(props.road.serializeBinary());
            },
            save(e) {
                var save_button = e.currentTarget;
                save_button.disabled = true;
                setTimeout(() => save_button.disabled = false, 1000); // An example of what to call when the (unimplemented) Promise is resolved

                saveRoad(this.state.editingRoad).then((response) => {
                    if (response) { this.state.error = false; }
                    else { this.state.error = true; }
                }).catch(err => {
                    this.state.error = true;
                }).finally(() => {
                    this.state.show_feedback = true;
                    this.update()
                });
            },
            checkSurfaceType(e) {
                this.state.editingRoad.setSurfaceType(e.currentTarget.value);
            },
            checkPavementClass(e) {
                this.state.editingRoad.setPavementClass(e.currentTarget.value);
            },
            pavements: window.road_schema.pavement_class,
            surface_types: window.road_schema.surface_type
        }
    </script>
</edit_pavement>
