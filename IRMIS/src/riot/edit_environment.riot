<edit_environment>
    <div class="content-wrapper">
        <div class="d-flex justify-content-between">
            <h5>{ window.gettext("Terrain Class Data") }</h5>
            <button class="btn btn-primary" onclick="{ addEditTerrain }" disabled="{ props.editing }">
                { window.gettext("Add") }
            </button>
        </div>

        <stacked_bar id="{ identifiers.terrain_class.stackedBarId }" entries="{ state.terrainClasses }"
            total_title="{ window.gettext('Total road chainage') }">
        </stacked_bar>

        <div class="d-flex">
            <a class="{ state.viewAllTerrain ? 'active' : '' } table-toggle" onclick="{ viewCurrentTerrain }">
                { window.gettext("Current terrain") }
            </a>
            <a class="{ !state.viewAllTerrain ? 'active' : '' } table-toggle" onclick="{ viewAllTerrain }">
                { window.gettext("View all data entries") }
            </a>
        </div>
        <data_table if="{ state.viewAllTerrain }" table_id="{identifiers.terrain_class.allDataTableId}"
            columns="{terrain_all_data_table_columns}" columnSortOrder="{terrain_all_data_table_columns_order}"
            getHelpText="{props.parent.getHelpText}" pendingRows="{state.pendingRows['terrain_class']}" canorder candelete>
        </data_table>
        <data_table if="{ !state.viewAllTerrain }" table_id="{identifiers.terrain_class.reportDataTableId}"
            columns="{terrain_current_data_table_columns}" columnSortOrder="{terrain_current_data_table_columns_order}"
            getHelpText="{props.parent.getHelpText}" pendingRows="{state.pendingRows['terrain_class']}" canorder>
        </data_table>
    </div>

    <div class="content-wrapper">
        <div class="d-flex justify-content-between">
            <h5>{ window.gettext("Rainfall Data") }</h5>
            <button class="btn btn-primary" onclick="{ addEditRainfall }" disabled="{ props.editing }">
                { window.gettext("Add") }</button>
        </div>

        <!-- <stacked_bar id="{ identifiers.rainfall.stackedBarId }" entries="{ state.rainfalls }"
            total_title="{ window.gettext('Total road chainage') }">
        </stacked_bar> -->

        <div class="d-flex">
            <a class="{ state.viewAllRainfall ? 'active' : '' } table-toggle" onclick="{ viewCurrentRainfall }">
                { window.gettext("Current rainfall") }
            </a>
            <a class="{ !state.viewAllRainfall ? 'active' : '' } table-toggle" onclick="{ viewAllRainfall }">
                { window.gettext("View all data entries") }
            </a>
        </div>
        <data_table if="{ state.viewAllRainfall }" table_id="{identifiers.rainfall.allDataTableId}"
            columns="{rainfall_all_data_table_columns}" columnSortOrder="{rainfall_all_data_table_columns_order}"
            getHelpText="{props.parent.getHelpText}" pendingRows="{state.pendingRows['rainfall']}" canorder candelete>
        </data_table>
        <data_table if="{ !state.viewAllRainfall }" table_id="{identifiers.rainfall.reportDataTableId}"
            columns="{rainfall_current_data_table_columns}" columnSortOrder="{rainfall_current_data_table_columns_order}"
            getHelpText="{props.parent.getHelpText}" pendingRows="{state.pendingRows['rainfall']}" canorder>
        </data_table>
    </div>

    <edit_modal modal_id="{ terrain_modal_id }" disableSave="{ !state.canSave }">
        <span slot="modal_title">{window.gettext("Add Terrain Class Information")}</span>

        <form slot="modal_body">
            <section>
                <div class="form-group">
                    <label>{ window.gettext("Survey Date") }</label>
                    <span class="required">*</span>
                    <small class="form-text text-muted">{props.parent.getHelpText("survey_date")}</small>
                    <!-- It would be preferable to use the 'datetime-local' input type, however Firefox currently does not support it -->
                    <input
                        class="{ state.errors.surveyDate ? 'danger' : null } { state.survey.surveyDate ? '' : 'inactive' } form-control"
                        type="date" name="surveyDate" placeholder="Date" value="{ state.survey.surveyDate }"
                        oninput="{ checkSurveyDate }" required pattern="\d{4}-\d{2}-\d{2}" max="{ max_date() }">
                    <div if="{ state.errors.surveyDate }" class="invalid-tooltip">
                        <ul>
                            <li>{ state.errors.surveyDate }.</li>
                        </ul>
                    </div>
                </div>
            </section>

            <section>
                <h6>{ window.gettext("Chainage") }</h6>
                <div class="form-group">
                    <label>{ window.gettext("Chainage start (m)") }</label>
                    <span class="required">*</span>
                    <small class="form-text text-muted">{ props.parent.getHelpText("start_chainage") }</small>
                    <input
                        class="{ state.errors.startChainage ? 'danger' : null } { state.survey.startChainage ? '' : 'inactive' } form-control"
                        type="number" name="startChainage" placeholder="1000" value="{ state.survey.startChainage }"
                        oninput="{ checkChainage }" min="0" max="999998" step="1" required>
                    <div if="{ state.errors.startChainage }" class="invalid-tooltip">
                        <ul>
                            <li>{ state.errors.startChainage }.</li>
                        </ul>
                    </div>
                </div>
                <div class="form-group">
                    <label>{ window.gettext("Chainage end (m)") }</label>
                    <span class="required">*</span>
                    <small class="form-text text-muted">{ props.parent.getHelpText("end_chainage") }</small>
                    <input
                        class="{ state.errors.endChainage ? 'danger' : null } { state.survey.endChainage ? '' : 'inactive' } form-control"
                        type="number" name="endChainage" placeholder="62410" value="{ state.survey.endChainage }"
                        oninput="{ checkChainage }" min="1" max="999999" step="1" required>
                    <div if="{ state.errors.endChainage }" class="invalid-tooltip">
                        <ul>
                            <li>{ state.errors.endChainage }.</li>
                        </ul>
                    </div>
                </div>
            </section>

            <section>
                <h6>{ window.gettext("Terrain Class") }</h6>
                <div class="form-group">
                    <label>{ terrains.display }</label>
                    <span class="required">*</span>
                    <small class="form-text text-muted">{ props.parent.getHelpText("terrain_class") }</small>
                    <ul class="terrain-class">
                        <li each="{terrain in terrains.options}" data-terrain="{terrain[0]}"
                            onclick="{checkTerrainClass}">
                            <span
                                class="{terrain[0] == state.survey.terrainClass ? 'active' : ''  } radio image"></span>
                            { terrain[1] }
                        </li>
                    </ul>
                    <div if="{ state.errors.terrainClass }" class="invalid-tooltip">
                        <ul>
                            <li>{ state.errors.terrainClass }.</li>
                        </ul>
                    </div>
                </div>
            </section>

            <div class="d-flex justify-content-end">
                <span>[</span><span class="required">*</span><span>]: Mandatory</span>
            </div>
        </form>
    </edit_modal>

    <edit_modal modal_id="{ rainfall_modal_id }" disableSave="{ !state.canSave }">
        <span slot="modal_title">{window.gettext("Add Rainfall Information")}</span>

        <form slot="modal_body">
            <section>
                <div class="form-group">
                    <label>{ window.gettext("Survey Date") }</label>
                    <span class="required">*</span>
                    <small class="form-text text-muted">{props.parent.getHelpText("survey_date")}</small>
                    <!-- It would be preferable to use the 'datetime-local' input type, however Firefox currently does not support it -->
                    <input
                        class="{ state.errors.surveyDate ? 'danger' : null } { state.survey.surveyDate ? '' : 'inactive' } form-control"
                        type="date" name="surveyDate" placeholder="Date" value="{ state.survey.surveyDate }"
                        oninput="{ checkSurveyDate }" required pattern="\d{4}-\d{2}-\d{2}" max="{ max_date() }">
                    <div if="{ state.errors.surveyDate }" class="invalid-tooltip">
                        <ul>
                            <li>{ state.errors.surveyDate }.</li>
                        </ul>
                    </div>
                </div>
            </section>

            <section>
                <h6>{ window.gettext("Chainage") }</h6>
                <div class="form-group">
                    <label>{ window.gettext("Chainage start (m)") }</label>
                    <span class="required">*</span>
                    <small class="form-text text-muted">{ props.parent.getHelpText("start_chainage") }</small>
                    <input
                        class="{ state.errors.startChainage ? 'danger' : null } { state.survey.startChainage ? '' : 'inactive' } form-control"
                        type="number" name="startChainage" placeholder="1000" value="{ state.survey.startChainage }"
                        oninput="{ checkChainage }" min="0" max="999998" step="1" required>
                    <div if="{ state.errors.startChainage }" class="invalid-tooltip">
                        <ul>
                            <li>{ state.errors.startChainage }.</li>
                        </ul>
                    </div>
                </div>
                <div class="form-group">
                    <label>{ window.gettext("Chainage end (m)") }</label>
                    <span class="required">*</span>
                    <small class="form-text text-muted">{ props.parent.getHelpText("end_chainage") }</small>
                    <input
                        class="{ state.errors.endChainage ? 'danger' : null } { state.survey.endChainage ? '' : 'inactive' } form-control"
                        type="number" name="endChainage" placeholder="62410" value="{ state.survey.endChainage }"
                        oninput="{ checkChainage }" min="1" max="999999" step="1" required>
                    <div if="{ state.errors.endChainage }" class="invalid-tooltip">
                        <ul>
                            <li>{ state.errors.endChainage }.</li>
                        </ul>
                    </div>
                </div>
            </section>

            <section>
                <div class="form-group">
                    <label>{ window.gettext("Source of data") }</label>
                    <small class="form-text text-muted">{ props.parent.getHelpText("Enter the source of the data") }</small>
                    <input
                        class="{ state.errors.sourceData ? 'danger' : null } { state.survey.sourceData ? '' : 'inactive' } form-control"
                        type="text" name="sourceData" placeholder="Survey team" value="{ state.survey.sourceData }"
                        oninput="{ checkSourceData }">
                    <div if="{ state.errors.sourceData }" class="invalid-tooltip">
                        <ul>
                            <li>{ state.errors.sourceData }.</li>
                        </ul>
                    </div>
                </div>
                <div class="form-group">
                    <label>{ window.gettext("Station name") }</label>
                    <small class="form-text text-muted">{ props.parent.getHelpText("Enter the station name") }</small>
                    <input
                        class="{ state.errors.stationName ? 'danger' : null } { state.survey.stationName ? '' : 'inactive' } form-control"
                        type="text" name="stationName" placeholder="Station A14" value="{ state.survey.stationName }"
                        oninput="{ checkStationName }">
                    <div if="{ state.errors.stationName }" class="invalid-tooltip">
                        <ul>
                            <li>{ state.errors.stationName }.</li>
                        </ul>
                    </div>
                </div>
            </section>

            <section>
                <h6>{ window.gettext("Location coordinates") }</h6>
                <div class="form-group">
                    <label>{ window.gettext("Latitude (DMS)") }</label>
                    <small class="form-text text-muted">{ props.parent.getHelpText("Enter the latitude in DMS format") }</small>
                    <input
                        class="{ state.errors.latitude ? 'danger' : null } { state.survey.latitude ? '' : 'inactive' } form-control"
                        type="text" name="latitude" placeholder="8°27'47.82&quot;N" value="{ state.survey.latitude }" oninput="{ checkLatitude }">
                    <div if="{ state.errors.latitude }" class="invalid-tooltip">
                        <ul>
                            <li>{ state.errors.latitude }.</li>
                        </ul>
                    </div>
                </div>
                <div class="form-group">
                    <label>{ window.gettext("Longitude (DMS)") }</label>
                    <small class="form-text text-muted">{ props.parent.getHelpText("Enter the longitude in DMS format") }</small>
                    <input
                        class="{ state.errors.longitude ? 'danger' : null } { state.survey.longitude ? '' : 'inactive' } form-control"
                        type="text" name="longitude" placeholder="126°27'9.96&quot;W" value="{ state.survey.longitude }" oninput="{ checkLongitude }">
                    <div if="{ state.errors.longitude }" class="invalid-tooltip">
                        <ul>
                            <li>{ state.errors.longitude }.</li>
                        </ul>
                    </div>
                </div>
            </section>

            <section>
                <h6>{ window.gettext("Period of Survey") }</h6>
                <div class="form-group">
                    <label>{ window.gettext("Period") }</label>
                    <select class="{ state.survey.period ? '' : 'inactive' } form-control"
                        onchange="{ checkPeriod }" name="year">
                        <option value="">{ window.gettext("Select survey period") }</option>
                        <option each="{ period in ["Day", "Month", "Year"] }" value="{ period }"
                            selected="{ period == state.survey.period }">{ period }</option>
                    </select>
                    <div if="{ state.errors.period }" class="invalid-tooltip">
                        <ul>
                            <li>{ state.errors.period }.</li>
                        </ul>
                    </div>
                </div>
                <div class="form-group">
                    <label>{ window.gettext("Year") }</label>
                    <select class="{ state.survey.year ? '' : 'inactive' } form-control"
                        onchange="{ checkYear }" name="year">
                        <option value="">{ window.gettext("Select survey year") }</option>
                        <option each="{ year in state.years }" value="{ year }"
                            selected="{ year == state.survey.year }">{ year }</option>
                    </select>
                    <div if="{ state.errors.year }" class="invalid-tooltip">
                        <ul>
                            <li>{ state.errors.year }.</li>
                        </ul>
                    </div>
                </div>
            </section>

            <section>
                <h6>{ window.gettext("Rainfall") }</h6>
                <div class="form-group">
                    <label>{ window.gettext("Rainfall Maximum") } (mm)</label>
                    <span class="required">*</span>
                    <small class="form-text text-muted">{ props.parent.getHelpText("rainfall_maximum") } (mm)</small>
                    <input
                        class="{ state.errors.rainfallMaximum ? 'danger' : null } { state.survey.rainfallMaximum ? '' : 'inactive' } form-control"
                        type="number" name="rainfallMaximum" placeholder="6000" value="{ state.survey.rainfallMaximum }"
                        oninput="{ checkRainfallMaximum }" min="0" max="9999" step="1" required>
                    <div if="{ state.errors.rainfallMaximum }" class="invalid-tooltip">
                        <ul>
                            <li>{ state.errors.rainfallMaximum }.</li>
                        </ul>
                    </div>
                </div>
                <div class="form-group">
                    <label>{ window.gettext("Rainfall Minimum") } (mm)</label>
                    <span class="required">*</span>
                    <small class="form-text text-muted">{ props.parent.getHelpText("rainfall_minimum") } (mm)</small>
                    <input class="{ state.errors.rainfallMinimum ? 'danger' : null } { state.survey.rainfallMinimum ? '' : 'inactive' } form-control"
                        type="number" name="rainfallMinimum" placeholder="2000" value="{ state.survey.rainfallMinimum }" oninput="{ checkRainfallMinimum }"
                        min="0" max="9999" step="1" required>
                    <div if="{ state.errors.rainfallMinimum }" class="invalid-tooltip">
                        <ul>
                            <li>{ state.errors.rainfallMinimum }.</li>
                        </ul>
                    </div>
                </div>
            </section>

            <div class="d-flex justify-content-end">
                <span>[</span><span class="required">*</span><span>]: Mandatory</span>
            </div>
        </form>
    </edit_modal>

    <edit_stop_alert modalId="delete-alert" title="{ window.gettext('Delete') }"
        description="{ window.gettext('Are you sure you want to delete this data entry?') }"
        proceedLabel="{ window.gettext('Delete') }" proceedResult="delete"
        stopLabel="{ window.gettext('Don\'t delete') }" stopResult="keep">
    </edit_stop_alert>

    <script>
        import Edit_Stop_Alert from "./edit_stop_alert.riot";
        import Data_Table from "./data_table.riot";
        import Edit_Modal from "./edit_modal.riot";
        import Stacked_Bar from "./stacked_bar.riot";

        import {createSurvey, deleteSurvey, updateSurvey} from "../surveyManager";
        import {checkRequiredFields, surveysAndReportRefresh} from "../assets/editUtilities";
        import {choice_or_default, toChainageFormat} from "../assets/protoBufUtilities";
        import {withinMaxDigits, formatNumber} from "../assets/utilities";

        import {TERRAIN_CLASS_CHOICES} from "../assets/models/choices";
        import {makeEstradaRoad} from "../assets/models/road";
        import {EstradaSurvey, makeEstradaSurvey} from "../assets/models/survey";

        import $ from "jquery";

        export default {
            state: {
                chainageDigits: 6,
                rainfallDigits: 4,
                baseSurvey: new EstradaSurvey({}),
                survey: {},
                canSave: false,
                errors: {},
                surveyTotalDistance: 0,
                pendingRows: {
                    "rainfall": [],
                    "terrain_class": [],
                },
                reportRows: {
                    "rainfall": [],
                    "terrain_class": [],
                },
                terrainClasses: [{key: 0, title: "unknown", distance: 0, percent: 100, label: window.gettext("Loading")}],
                rainfalls: [{key: 0, title: "unknown", distance: 0, percent: 100, label: window.gettext("Loading")}],
                viewAllTerrain: false,
                viewAllRainfall: false,
                editMode: false,
                // Current Attribute type Modal / Editing tracking
                currentModalId: false,
                currentRequiredFieldNames: [],
                currentEditing: false,
                currentRowData: new EstradaSurvey({}),
                years: generateRange(1970, new Date().getFullYear())
            },
            components: {
                Edit_Stop_Alert, Edit_Modal, Stacked_Bar
            },
            identifiers: {
                terrain_class:{
                    allDataTableId: "terrain-type-table",
                    primaryAttribute: "terrain_class",
                    reportAttribute: "terrainClasses",
                    reportDataTableId: "terrain-type-report-table",
                    stackedBarId: "terrain-type-stacked-bar",
                },
                rainfall:{
                    allDataTableId: "rainfall-table",
                    primaryAttribute: "rainfall_maximum",
                    reportAttribute: "rainfallMaximums",
                    reportDataTableId: "rainfall-report-table",
                    stackedBarId: "rainfall-stacked-bar",
                },
            },

            // Condition Survey
            onMounted(props, state) {
                state.road = makeEstradaRoad(props.road);

                this.deleteListener = (data) => {
                    const tableId = data.detail.tableId;
                    const rowId = data.detail.rowId;
                    this.showStopAlertModal("delete-alert", rowId, tableId);
                };

                const refreshPromises = [];
                Object.keys(this.identifiers).forEach((idSet) => {
                    this.identifiers[idSet].emptyAttributes = this.props.parent.emptyAttributes;
                    refreshPromises.push(surveysAndReportRefresh(state, this.identifiers[idSet]));
                });

                Promise.all(refreshPromises).then((results) => {
                    Object.keys(this.identifiers).forEach((idSet) => {
                        document.addEventListener(`${this.identifiers[idSet].allDataTableId}.deleteRow`, this.deleteListener);
                    });
                    this.update();
                });
            },
            onUnmount(props, state) {
                Object.keys(this.identifiers).forEach((idSet) => {
                    document.removeEventListener(`${this.identifiers[idSet].allDataTableId}.deleteRow`, this.deleteListener)
                });
            },
            viewChange(identifierSet) {
                this.update();
                surveysAndReportRefresh(this.state, identifierSet);
            },
            viewAllRainfall(e) {
                if (!this.state.viewAllRainfall) {
                    this.state.viewAllRainfall = true;
                    this.viewChange(this.identifiers["rainfall"]);
                }
            },
            viewAllTerrain(e) {
                if (!this.state.viewAllTerrain) {
                    this.state.viewAllTerrain = true;
                    this.viewChange(this.identifiers["terrain_class"]);
                }
            },
            viewCurrentRainfall(e) {
                if (this.state.viewAllRainfall) {
                    this.state.viewAllRainfall = false;
                    this.viewChange(this.identifiers["rainfall"]);
                }
            },
            viewCurrentTerrain(e) {
                if (this.state.viewAllTerrain) {
                    this.state.viewAllTerrain = false;
                    this.viewChange(this.identifiers["terrain_class"]);
                }
            },
            addEditRainfall(e) {
                this.state.survey = makeEstradaSurvey(this.state.baseSurvey);
                this.state.errors = {};
                this.state.currentEditing = "rainfall";
                this.state.currentModalId = this.rainfall_modal_id;
                this.state.currentRequiredFieldNames = this.rainfallRequiredFieldNames;
                this.showEditModal();
            },
            addEditTerrain(e) {
                this.state.survey = makeEstradaSurvey(this.state.baseSurvey);
                this.state.errors = {};
                this.state.currentEditing = "terrainClass";
                this.state.currentModalId = this.terrain_modal_id;
                this.state.currentRequiredFieldNames = this.terrainRequiredFieldNames;
                this.showEditModal();
            },

            // Modal IDs
            terrain_modal_id: "terrain-type-modal",
            rainfall_modal_id: "rainfall-modal",

            // Terrain Class Table
            terrains: window.asset_schema.terrain_class,
            terrain_current_data_table_columns_order: [[0, 'asc']],
            terrain_current_data_table_columns: [
                {
                    title: window.gettext("Chainage start"),
                    data: "chainageStart",
                    defaultContent: "",
                    className: "text-right",
                    render: (data, type) => {
                        return (type === 'display') ? toChainageFormat(data) : data;
                    },
                },
                {
                    title: window.gettext("Chainage end"),
                    data: "chainageEnd",
                    defaultContent: "",
                    className: "text-right",
                    orderable: false,
                    render: (data, type) => {
                        return (type === 'display') ? toChainageFormat(data) : data;
                    },
                },
                {
                    title: window.gettext("Terrain class"),
                    data: "terrainClass",
                    defaultContent: "",
                    className: "text-center",
                    orderable: false,
                },
                {
                    title: window.gettext("Survey date"),
                    data: "dateSurveyed",
                    defaultContent: "",
                    className: "text-center",
                    orderable: false,
                },
                {
                    title: window.gettext("Added by"),
                    data: "addedBy",
                    defaultContent: "",
                    orderable: false,
                },
            ],

            terrain_all_data_table_columns_order: [[3, 'desc'], [0, 'asc']],
            terrain_all_data_table_columns: [
                {
                    title: window.gettext("Chainage start"),
                    data: "chainageStart",
                    defaultContent: "",
                    className: "text-right",
                    render: (data, type) => {
                        return (type === 'display') ? toChainageFormat(data) : data;
                    },
                },
                {
                    title: window.gettext("Chainage end"),
                    data: "chainageEnd",
                    defaultContent: "",
                    className: "text-right",
                    orderable: false,
                    render: (data, type) => {
                        return (type === 'display') ? toChainageFormat(data) : data;
                    },
                },
                {
                    title: window.gettext("Terrain class"),
                    data: "terrainClass",
                    defaultContent: "",
                    className: "text-center",
                    orderable: false,
                    render: (data, type) => {
                        return (type === 'display') ? choice_or_default(data, TERRAIN_CLASS_CHOICES) : data;
                    },                },
                {
                    title: window.gettext("Survey date"),
                    data: "dateSurveyed",
                    defaultContent: "",
                    className: "text-center",
                },
                {
                    title: window.gettext("Added by"),
                    data: "addedBy",
                    defaultContent: "",
                    orderable: false,
                },
                {
                    // To add a 'Delete' button include the attribute candelete
                    // on the Riot dataTable tag as well
                    title: window.gettext("Delete"),
                    name: "Option", // Do NOT translate this
                    defaultContent: "",
                    className: "text-center",
                    orderable: false,
                },
            ],
            // Rainfall Class Table
            rainfallRanges: window.asset_schema.rainfall_maximum,
            rainfall_current_data_table_columns_order: [[0, 'asc']],
            rainfall_current_data_table_columns: [
                {
                    title: window.gettext("Chainage start"),
                    data: "chainageStart",
                    defaultContent: "",
                    className: "text-right",
                    render: (data, type) => {
                        return (type === 'display') ? toChainageFormat(data) : data;
                    },
                },
                {
                    title: window.gettext("Chainage end"),
                    data: "chainageEnd",
                    defaultContent: "",
                    className: "text-right",
                    orderable: false,
                    render: (data, type) => {
                        return (type === 'display') ? toChainageFormat(data) : data;
                    },
                },
                {
                    title: window.gettext("Max. Rainfall (mm)"),
                    data: "value",
                    defaultContent: "",
                    className: "text-center",
                    orderable: false,
                    render: (data, type) => {
                        return (type === 'display') ? formatNumber(data) : data;
                    },
                },
                {
                    title: window.gettext("Survey date"),
                    data: "dateSurveyed",
                    defaultContent: "",
                    className: "text-center",
                    orderable: false,
                },
                {
                    title: window.gettext("Added by"),
                    data: "addedBy",
                    defaultContent: "",
                    orderable: false,
                },
            ],
            rainfall_all_data_table_columns_order: [[3, 'desc'], [0, 'asc']],
            rainfall_all_data_table_columns: [
                {
                    title: window.gettext("Chainage start"),
                    data: "chainageStart",
                    defaultContent: "",
                    className: "text-right",
                    render: (data, type) => {
                        return (type === 'display') ? toChainageFormat(data) : data;
                    },
                },
                {
                    title: window.gettext("Chainage end"),
                    data: "chainageEnd",
                    defaultContent: "",
                    className: "text-right",
                    orderable: false,
                    render: (data, type) => {
                        return (type === 'display') ? toChainageFormat(data) : data;
                    },
                },
                {
                    title: window.gettext("Maximum Rainfall (mm)"),
                    data: "rainfallMaximum",
                    defaultContent: "",
                    className: "text-center",
                    render: (data, type) => {
                        return (type === 'display') ? formatNumber(data) : data;
                    },
                },
                {
                    title: window.gettext("Minimum Rainfall (mm)"),
                    data: "rainfallMinimum",
                    defaultContent: "",
                    className: "text-center",
                    render: (data, type) => {
                        return (type === 'display') ? formatNumber(data) : data;
                    },
                },
                {
                    title: window.gettext("Station name"),
                    data: "stationName",
                    defaultContent: "",
                    className: "text-center",
                    orderable: false,
                },
                {
                    title: window.gettext("Period"),
                    data: "period",
                    defaultContent: "",
                    className: "text-center",
                    orderable: false,
                },
                {
                    title: window.gettext("Year"),
                    data: "year",
                    defaultContent: "",
                    className: "text-center",
                    orderable: false,
                },
                {
                    title: window.gettext("Source of data"),
                    data: "sourceData",
                    defaultContent: "",
                    className: "text-center",
                    orderable: false,
                },
                {
                    title: window.gettext("Survey date"),
                    data: "dateSurveyed",
                    defaultContent: "",
                    className: "text-center",
                },
                {
                    title: window.gettext("Added by"),
                    data: "addedBy",
                    defaultContent: "",
                    orderable: false,
                },
                {
                    // To add a 'Delete' button include the attribute candelete
                    // on the Riot dataTable tag as well
                    title: window.gettext("Delete"),
                    name: "Option", // Do NOT translate this
                    defaultContent: "",
                    className: "text-center",
                    orderable: false,
                },
            ],

            // Surveys Modal
            terrainRequiredFieldNames: ["surveyDate", "startChainage", "endChainage", "terrainClass"],
            rainfallRequiredFieldNames: ["surveyDate", "startChainage", "endChainage", "rainfallMaximum", "rainfallMinimum"],

            showEditModal() {
                document.addEventListener(`${this.state.currentModalId}.result`, (data) => {
                    const modalResult = data.detail.result;

                    switch (modalResult) {
                        case "save":
                            if (this.hasChanges()) {
                                this.save();
                            }
                            break;
                        case "cancel":
                            this.discardChanges();
                            break;
                        default:
                            if (this.hasChanges()) {
                                this.showStopAlertModal("stop-alert");
                            }
                            break;
                    }
                }, {once: true});

                $(`#${this.state.currentModalId}`).modal("show");
            },
            showStopAlertModal(modalId, rowId, tableId) {
                const eventName = `edit.${modalId}.result`;

                document.addEventListener(eventName, (data) => {
                    const stopAlertResult = data.detail.result;
                    $(`#${modalId}`).modal("hide");

                    if (stopAlertResult === "discard") {
                        this.discardChanges();
                    } else if (stopAlertResult === "delete") {
                        this.state.editMode = true;
                        // Coming out of the stop-alert modal we want to re-establish the data-table
                        const eventName = `${tableId}.getRowData`;
                        const eventDetail = {detail: {rowId: rowId, state: this.state}};
                        document.dispatchEvent(new CustomEvent(eventName, eventDetail));

                        // void the survey asset_condition value and save
                        if (this.state.currentRowData) {
                            this.state.survey = this.state.currentRowData;
                            this.state.survey.setId(rowId);
                            this.state.survey.setAssetId("ROAD-" + this.state.road.id);
                            this.state.survey.setAssetCode(this.state.road.code);
                            this.state.survey.setValues(JSON.stringify({}));
                            this.saveSurvey();
                        }
                        this.state.editMode = false;
                    } else if (stopAlertResult === "continueEdit") {
                        this.showEditModal();
                    }
                }, {once: true});

                $(`#${modalId}`).modal("show");
            },
            discardChanges() {
                $(`#${this.state.currentModalId}`).modal("hide");
                this.update({
                    survey: makeEstradaSurvey(this.state.baseSurvey),
                    errors: {},
                    currentEditing: false,
                    currentModalId: false,
                    currentRequiredFieldNames: [],
                });
            },
            save(e) {
                const missingFieldNames = checkRequiredFields(this.state.currentRequiredFieldNames, this.state.survey);
                if (Object.keys(this.state.errors).length) {
                    // Cannot save if there are validation errors
                    this.canSave();
                    if (!this.state.canSave) {
                        missingFieldNames.forEach((fieldName) => {
                            if (!data[fieldName]) {
                                errors[fieldName] = window.gettext("This field is required");
                            }
                        });
                        this.showEditModal();
                    }
                } else {
                    if (this.hasChanges()) {
                        // Complete the survey
                        this.state.survey.setUser($("#user_welcome").data("userId") || 0);
                        this.state.survey.setSource("Estrada");
                        this.state.survey.setChainageStart(this.state.survey.startChainage);
                        this.state.survey.setChainageEnd(this.state.survey.endChainage);
                        if (this.state.currentEditing == "rainfall") {
                            this.state.survey.setValues(JSON.stringify({
                                rainfall_maximum: this.state.survey.rainfallMaximum || null,
                                rainfall_minimum: this.state.survey.rainfallMinimum || null,
                                station_name: this.state.survey.stationName || null,
                                source_data: this.state.survey.sourceData || null,
                                latitude: this.state.survey.latitude || null,
                                longitude: this.state.survey.longitude || null,
                                period: this.state.survey.period || null,
                                year: this.state.survey.year || null,
                            }));
                        } else {
                            this.state.survey.setValues(JSON.stringify({
                                terrain_class: this.state.survey.terrainClass || null,
                            }));
                        }
                        // If we're here we will have a user entered surveyDate, even so Date.now() is still used as a fall back
                        const dateSurveyed = new proto.google.protobuf.Timestamp();
                        const surveyDate = new Date(this.state.survey.surveyDate || Date.now().toISOString());
                        dateSurveyed.fromDate(surveyDate);
                        this.state.survey.setDateSurveyed(dateSurveyed);
                        // set Survey road from state Road road_code
                        this.state.survey.setAssetId("ROAD-" + this.state.road.id);
                        this.state.survey.setAssetCode(this.state.road.code);
                        this.saveSurvey();
                    }

                    // Reset baseSurvey now that we're done.
                    this.baseSurvey = new EstradaSurvey({});
                    $(`#${this.state.currentModalId}`).modal("hide");
                }
            },
            saveSurvey() {
                $(`#${this.state.currentModalId}`).modal("hide");
                $('#asset-manager-loading').modal('show');

                const surveyAction = !this.state.editMode
                    ? createSurvey(this.state.survey)
                    : updateSurvey(this.state.survey);
                const identifiers = !this.state.editMode
                    ? [this.identifiers[this.state.currentEditing == "rainfall" ? "rainfall" : "terrain_class"]]
                    : this.identifiers;

                surveyAction.then((surveyData) => {
                    const refreshPromises = [];
                    Object.keys(this.identifiers).forEach((idSet) => {
                        refreshPromises.push(surveysAndReportRefresh(this.state, this.identifiers[idSet]));
                    });

                    Promise.all(refreshPromises).then((results) => {
                        this.update({
                            survey: new EstradaSurvey({}), // clear input values
                        });
                        this.props.showFeedback();
                    });
                })
                .catch((err) => {
                    this.props.showFeedback(true);
                })
                .finally((r) => {
                    $("#asset-manager-loading").modal("hide");
                });

                // clear input values
                this.state.survey = new EstradaSurvey({});
                this.state.errors = {};
                this.update();
            },
            canSave() {
                const missingFieldNames = checkRequiredFields(this.state.currentRequiredFieldNames, this.state.survey);
                if (missingFieldNames.length || Object.keys(this.state.errors).length) {
                    // Cannot save if there are validation errors
                    this.state.canSave = false;
                } else {
                    // Can save if something has changed
                    this.state.canSave = JSON.stringify(this.state.baseSurvey) !== JSON.stringify(this.state.survey);
                }
                this.update();
            },
            /** Compare the selected fields between baseSurvey and survey.
             * `source` and `user` are deliberately not compared
             */
            hasChanges() {
                const compareFieldNames = ["surveyDate", "startChainage", "endChainage", this.state.currentEditing];
                const surveyBase = compareFieldNames.map((fieldName) => {return this.state.baseSurvey[fieldName] || "";}).join("|||");
                const surveyResult = compareFieldNames.map((fieldName) => {return this.state.survey[fieldName] || "";}).join("|||");
                return (surveyBase !== surveyResult);
            },
            validate(fieldName, input, testResult, errorText) {
                if (!testResult) {
                    this.state.errors[fieldName] = errorText;
                } else {
                    delete this.state.errors[fieldName];
                    this.state.survey[fieldName] = input;
                }
                this.canSave();
            },
            checkSurveyDate(e) {
                const fieldName = e.currentTarget.name;
                const input = e.currentTarget.value;
                const testResult = input <= this.max_date();
                const errorText = window.gettext("Survey date cannot be in the future");

                this.validate(fieldName, input, testResult, errorText);
            },
            checkChainage(e) {
                const fieldName = e.currentTarget.name;
                const nominalInput = Number(e.currentTarget.value);
                const input = e.currentTarget.value;

                const nominalStart = fieldName === "startChainage" ? 0 : (parseInt(this.state.survey.startChainage, 10) || 0) + 1;
                const nominalEnd =  fieldName === "endChainage" ? 999999 : (parseInt(this.state.survey.endChainage, 10) || 999999) - 1;

                const chainageError = !withinMaxDigits(input, this.state.chainageDigits)
                    ? window.gettext(`Chainage cannot contain more than ${this.state.chainageDigits} digits and value shouldn't contain decimals`)
                    : "";
                const rangeError = !(nominalInput >= nominalStart && nominalInput <= nominalEnd)
                    ? window.gettext(`Chainage must be greater than or equal to ${nominalStart} and less than or equal to ${nominalEnd}`)
                    : "";

                const testResult = !(chainageError || rangeError);
                const errorText = `${chainageError} ${rangeError}`.trim();

                this.validate(fieldName, input, testResult, errorText);
            },
            checkTerrainClass(e) {
                this.state.survey.terrainClass = e.currentTarget.dataset.terrain;
                this.canSave();
            },
            checkStationName(e) {
                this.state.survey.stationName = e.currentTarget.value;
                this.canSave();
            },
            checkSourceData(e) {
                this.state.survey.sourceData = e.currentTarget.value;
                this.canSave();
            },
            checkLatitude(e) {
                this.state.survey.latitude = e.currentTarget.value;
                this.canSave();
            },
            checkLongitude(e) {
                this.state.survey.longitude = e.currentTarget.value;
                this.canSave();
            },
            checkPeriod(e) {
                this.state.survey.period = e.currentTarget.value;
                this.canSave();
            },
            checkYear(e) {
                this.state.survey.year = e.currentTarget.value;
                this.canSave();
            },
            checkRainfallMaximum(e) {
                const fieldName = e.currentTarget.name;
                const input = e.currentTarget.value;
                const testResult = withinMaxDigits(input, this.state.rainfallDigits);
                const errorText = window.gettext(`Rainfall cannot contain more than ${this.state.rainfallDigits} digits and value shouldn't contain decimals`);
                this.validate(fieldName, input, testResult, errorText);
            },
            checkRainfallMinimum(e) {
                const fieldName = e.currentTarget.name;
                const input = e.currentTarget.value;
                const testResult = withinMaxDigits(input, this.state.rainfallDigits);
                const errorText = window.gettext(`Rainfall cannot contain more than ${this.state.rainfallDigits} digits and value shouldn't contain decimals`);
                this.validate(fieldName, input, testResult, errorText);
            },
            max_date: () => new Date().toISOString().substring(0, 10),
        }

        function generateRange(min, max, step=1){
            let arr = [];
            for(let i = min; i <= max; i += step) {
                arr.push(i);
            }
            return arr;
        }
    </script>
</edit_environment>
