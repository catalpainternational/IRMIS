<reports_base>
    <loading modalId="reports-loading"></loading>

    <div class="row">
        <div id="side-menu">
            <div>
                <ul class="navigation">
                    <ul>
                        <li class="{ state.page === 'dashboard' ? 'active' : '' }" data-page="dashboard"
                            onclick="{ selectTab }">{ window.gettext("Dashboard") }
                        </li>
                        <li class="{ state.page === 'assets' ? 'active' : '' }" data-page="assets"
                            onclick="{ selectTab }">{ window.gettext("Asset Reports") }
                        </li>
                        <!-- <li class="{ state.page === 'reports_builder' ? 'active' : '' }" data-page="reports_builder"
                            onclick="{ selectTab }">{ window.gettext("Reports Builder") }
                        </li> -->
                        <li if={ window.canViewContractReports } class="{state.page === 'contracts' ? 'active' : '' }" data-page="contracts"
                            onclick="{ selectTab }">{ window.gettext("Contract Reports") }
                        </li>
                    </ul>
                </ul>
            </div>
        </div>

        <div id="{ state.page === 'dashboard' ? 'dashboard' : state.page === 'assets' ? 'report-assets' : 'report-contracts' }">
            <div if="{ state.page === 'dashboard' }">
                <report_dashboard showFeedback="{ showFeedback }"></report_dashboard>
            </div>

            <div if="{ state.page === 'assets' }">
                <report_assets if="{ state.pageId }" id="{ state.pageId }" showFeedback="{ showFeedback }"></report_assets>
                <div if="{ !state.pageId }">
                    <div each="{ section in state.reportAssetsSections }" class="content-wrapper">
                        <h6>{ section.title }</h6>
                        <div each="{ report in state.assetReports.filter((report) => { return report.section === section.section }) }"
                            class="{ report.disabled ? 'align-items-center d-flex report disabled' : 'align-items-center d-flex report' }"
                            onclick="{ selectPage }" data-id="{ report.id }">
                            <span class="paper image"></span>
                            <p>{ report.title }</p>
                        </div>
                    </div>
                </div>
            </div>

            <div if="{ state.page === 'contracts' }">
                <report_contracts if="{ state.pageId }" id="{ state.pageId }" showFeedback="{ showFeedback }"></report_contracts>
                <div if="{ !state.pageId }">
                    <div each="{ section in state.reportContractsSections }" class="content-wrapper">
                        <h6>{ section.title }</h6>
                        <div each="{ report in state.contractReports.filter((report) => { return report.section === section.section }) }"
                            class="{ report.disabled ? 'align-items-center d-flex report disabled' : 'align-items-center d-flex report' }"
                            onclick="{ selectPage }" data-id="{ report.id }">
                            <span class="paper image"></span>
                            <p>{ report.title }</p>
                        </div>
                    </div>
                </div>
            </div>

            <footer>
                <small>{ window.gettext("Democratic Republic of Timor-Leste") } / { window.gettext("Ministry of Public Works") }</small>
                <small>{ window.gettext("Created by Catalpa International") }</small>
            </footer>
        </div>
    </div>

    <feedback_banner if="{ state.showFeedback }" close="{ closeFeedback }"
        successMessage="{ window.gettext('Report successfully created') }"
        errorMessage="{ window.gettext('Something went wrong') }" error="{ state.error }">
    </feedback_banner>

    <script>
        import { reportAssetsSections, reportContractsSections, assetReports, contractReports } from "../reportTableDefinitions";

        import Feedback_Banner from './feedback_banner.riot';
        import Report_Assets from './report_assets.riot';
        import Report_Contracts from './report_contracts.riot';
        import Report_Dashboard from './report_dashboard.riot';

        export default {
            state: {
                showFeedback: false,
                error: false,
                page: "",
                pageId: 0,
                reportAssetsSections: reportAssetsSections,
                reportContractsSections: reportContractsSections,
                assetReports: assetReports,
                contractReports: contractReports,
            },
            components: {
                Feedback_Banner, Report_Dashboard, Report_Assets, Report_Contracts,
            },
            onBeforeMount(props, state) {
                state.page = props.page;
                state.pageId = props.pageId;
                window.addEventListener("hashchange", this.hashCheck);
                window.goBack = () => window.location.hash = "#";
            },
            onBeforeUnmount(props, state) {
                window.removeEventListener("hashchange", this.hashCheck);
                window.goBack = () => {};
            },
            hashCheck() {
                const reportHash = /#reports\/(\w+)\/(\d*)/.exec(location.hash);

                if (reportHash) {
                    this.update({
                        page: reportHash[1],
                        pageId: reportHash[2]
                    });
                }
            },
            selectTab(e) {
                this.state.page = e.currentTarget.dataset.page;

                window.location.hash = `#reports/${this.state.page}/`;
            },
            selectPage(e) {
                this.state.pageId = e.currentTarget.dataset.id;

                window.location.hash = `#reports/${this.state.page}/${this.state.pageId}/`;
            },
            showFeedback(error) {
                this.update({
                    showFeedback: true,
                    error: error,
                });
                setTimeout(() => this.closeFeedback(), 2000);
            },
            closeFeedback() {
                const feedback = document.getElementsByClassName("slide-in").item(0);

                if (feedback) {
                    feedback.classList.add("slide-out");
                    setTimeout(() => {
                        feedback.classList.remove("slide-out");
                        this.update({showFeedback: false});
                    }, 300);
                }
            },
        }
    </script>
</reports_base>
