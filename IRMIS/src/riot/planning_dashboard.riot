<planning_dashboard>
    <div class="print-header">
        <div class="align-items-center d-flex">
            <span class="image rdtl-logo"></span>
            <div class="d-flex flex-column">
                <span>{ window.gettext("Democratic Republic of Timor-Leste") }</span>
                <span>{ window.gettext("Ministry of Public Works") }</span>
                <span>{ window.gettext("Directorate General for Public Works") }</span>
                <span>{ window.gettext("National Directorate for Roads, Bridges and Flood Control") }</span>
                <small>Avenida da Restauração, Rai Kotu, Díli, Timor-Leste, Telf. +670 3311408</small>
            </div>
        </div>
    </div>

    <header class="align-items-center d-flex justify-content-between">
        <h1>{ window.gettext("Planning and Budgetting Dashboard") }</h1>
        <button class="btn btn-secondary btn-sm" onclick="{ () => window.print() }">
            { window.gettext("Print") }
        </button>
    </header>

    <div class="content-wrapper">
        <template if="{ !isEmpty(state.summaries) && !isEmpty(state.summaryData) }">
            <h5>{ window.gettext("5-Year Plan and Budget Summary") }</h5>
            <div class="planning-dashboard-section" each="{ workType in Object.entries(workTypes) }">
                <div class="total-budget">
                    <p>{ window.gettext("Total Budget") } { workType[1] }</p>
                    <h1>$ { formatNumber(total(workType[0])) }</h1>
                </div>
                <div class="d-flex justify-content-end">
                    <button onclick="{ () => exportTableAsCsv(workType) }" class="btn btn-secondary btn-sm">{ window.gettext("Export table") }</button>
                </div>
                <table class="planning-dashboard-table d-block table table-bordered">
                    <thead>
                        <tr>
                            <th rowspan="2">
                                { workType[1] }
                            </th>
                            <th each="{ year in years }" colspan="2">
                                { year }
                            </th>
                        </tr>
                        <tr>
                            <template each="{ year in years }">
                                <th>
                                    { window.gettext("Budget") }
                                </th>
                                <th>
                                    { window.gettext("Length") }
                                </th>
                            </template>
                        </tr>
                    </thead>
                    <tbody>
                        <tr each="{ assetClass in Object.entries(assetClasses) }">
                            <td>
                                { assetClass[1][1] }
                            </td>
                            <template each="{ year in years }">
                                <td class="text-right">
                                    { getBudget(workType, assetClass, year) == 0 ? "" : getFormattedBudget(workType, assetClass, year) }
                                </td>
                                <td class="text-right">
                                    { getLength(workType, assetClass, year) == 0 ? "" : getFormattedLength(workType, assetClass, year) }
                                </td>
                            </template>
                        </tr>
                    </tbody>
                </table>
                <small class="text-muted">{ window.gettext("Budget values in the table are in million USD and length in Km") }</small>
            </div>
        </template>
        <template if="{ isEmpty(state.summaries) }">
            <div class="align-items-center d-flex flex-column justify-content-center no-data-wrapper">
                <span class="no-data image"></span>
                <h6>{ window.gettext("Welcome to the planning and budgetting tool") }.</h6>
                <p>{ window.gettext("No plans available yet") }</p>
            </div>
        </template>
    </div>

    <div class="print-footer">
        <div class="d-flex align-items-center justify-content-between">
            <span class="app-logo image"></span>
            <p>{ window.gettext("Exported from Estrada on") } { state.dateCreated }</p>
        </div>
    </div>

    <script>
        import $ from "jquery";

        import { getSnapshots, getPlans } from "../planManager";
        import { currentDateTime } from "../assets/reportUtilities";
        import { formatNumber } from "../assets/utilities";
        import { exportCsv } from "exportCsv";

        export default {
            state: {
                summaries: [],
                summaryData: [],
                dateCreated: currentDateTime(),
            },
            workTypes: {
                'routine': window.gettext('Routine Maintenance'),
                'periodic': window.gettext('Periodic Maintenance'),
                'rehab': window.gettext('Rehabilitation'),
                'spot': window.gettext('Spot Improvement'),
            },
            assetClasses: window.asset_schema.asset_class.options.filter((item) => item[0] !== "HIGH"),
            years: getYears(),
            onMounted() {
                $("#planning-loading").modal("show");
                this.fetchSummaries();
            },
            total(workType) {
                return Object.values(this.state.summaryData[workType]).reduce(
                    (workTypeTotal, assetClassData) => {
                        return workTypeTotal + Object.values(assetClassData).reduce(
                            (assetClassTotal, yearData) => {
                                return assetClassTotal + yearData.budget;
                            }, 0);
                    }, 0);
            },
            getBudget(workType, assetClass, year) {
                return this.state.summaryData[workType[0]][assetClass[1][0]][year].budget;
            },
            getFormattedBudget(workType, assetClass, year) {
                return formatNumber((this.getBudget(workType, assetClass, year)/1000000).toFixed(2));
            },
            getLength(workType, assetClass, year) {
                return this.state.summaryData[workType[0]][assetClass[1][0]][year].length;
            },
            getFormattedLength(workType, assetClass, year) {
                return formatNumber(this.getLength(workType, assetClass, year).toFixed(2));
            },
            isEmpty(data) {
                for (var i in data) {
                    return false;
                }
                return true;
            },
            fetchSummaries() {
                // Fetch Summaries (ie. PlanSnapshot objects) from the server
                getSnapshots()
                    .then((snapshotsData) => {
                        this.state.summaries = snapshotsData;
                    }).catch((err) => {
                        this.state.summaries = [];
                    }).finally((r) => {
                        this.buildSummaryData();
                        this.update();
                        $("#planning-loading").modal("hide");
                    });
            },
            buildSummaryData() {
                // populate empty Years object
                const empty_years = {};
                this.years.forEach((year) => {
                    empty_years[year] = {length: 0, budget: 0};
                });

                // populate empty Asset Classes object with above empty Years object
                const empty_asset_classes = {};
                Object.entries(this.assetClasses).forEach(assetClass => {
                    empty_asset_classes[assetClass[1][0]] =  empty_years;
                });

                // build the SummaryData object containing the keys we want in the summary
                this.state.summaryData = {};
                Object.entries(this.workTypes).forEach(wt => {
                    this.state.summaryData[wt[0]] = JSON.parse(JSON.stringify(empty_asset_classes));
                });

                // sort an array of summaries into { length, budget } objects nested by workTypes.assetClass.year
                this.state.summaries.forEach(summary => {
                    // do nothing if the summary does not have keys we are interested in
                    if (!this.state.summaryData.hasOwnProperty(summary.workType)) return;
                    if (!this.state.summaryData[summary.workType].hasOwnProperty(summary.assetClass)) return;
                    if (!this.state.summaryData[summary.workType][summary.assetClass].hasOwnProperty(summary.year)) return;
                    // only set a value if one has NOT been set already (we want only the most recent Plan data)
                    if (this.state.summaryData[summary.workType][summary.assetClass][summary.year].budget == 0 &&
                        this.state.summaryData[summary.workType][summary.assetClass][summary.year].length == 0
                    ) {
                        this.state.summaryData[summary.workType][summary.assetClass][summary.year].budget = summary.budget;
                        this.state.summaryData[summary.workType][summary.assetClass][summary.year].length = summary.length;
                    }
                });
            },
            exportTableAsCsv(workType) {
                const rowsData = this.state.summaryData[workType[0]];
                const columnsTotal = this.years.length * 2;
                const valueColumns = [workType[1]];
                const rows = [];
                
                let years = this.years.slice(); //Clone this.years and return a new reference to a new array
                let headers = [];

                // Year columns
                for (let index = 1; index < columnsTotal; index = index + 2) {
                    headers[index] = years.shift();
                };

                // Budget and length columns
                this.years.forEach(year => {
                    valueColumns.push(window.gettext("Budget ($)"), window.gettext("Length (Km)"));
                });
                rows.push(valueColumns);

                // Rows values by asset type
                this.assetClasses.forEach(assetClass => {
                    const rowFields = [];
                    rowFields.push(assetClass[1]);

                    const values = rowsData[assetClass[0]];

                    this.years.forEach(year => {
                        rowFields.push(values[year].budget);
                        rowFields.push((values[year].length).toFixed(2));
                    });

                    rows.push(rowFields);
                });

                exportCsv(headers, rows, workType[1]);
            },
            formatNumber: (value) => formatNumber(value),
        }

        function getYears() {
            // returns an array containing this year, and the four next
            const now = new Date().getFullYear();
            const years = [now];
            for (let i = 1; i < 5; i++) {
                years.push(now + i);
            }
            return years;
        }
    </script>
</planning_dashboard>
