<edit_condition>
    <h5>{ window.gettext ("Condition") }</h5>

    <edit_feedback if="{ state.show_feedback }" error="{ state.error }"></edit_feedback>

    <section>
        <div class="form-group">
            <label>{ conditions.display }</label>
            <small class="form-text text-muted">{ window.gettext("Choose road link surface condition according to the Surface Distress Index (SDI): Good (SDI≤2), fair (2<SDI≤3), poor (3<SDI≤4) or bad (SDI>4)") }</small>
            <ul class="surface-condition">
                <li each="{ condition in conditions.options }" data-condition="{ condition[0] }" onclick="{ checkSurfaceCondition }">
                    <span class="{ condition[0] == state.editingRoad.getSurfaceCondition() ? 'active' : ''  } radio image"></span>
                    { condition[1] }
                </li>
            </ul>
        </div>
        <div class="form-group">
            <label>{ maintenance_needs.display }</label>
            <small class="form-text text-muted">{ window.gettext("Choose the type of maintenace needs for the road link") }</small>
            <ul class="maintenance-need">
                <li each="{ maintenance_need in maintenance_needs.options }" data-maintenance="{ maintenance_need.code }" onclick="{ checkMaintenanceNeed }">
                    <span class="{ maintenance_need.code === state.editingRoad.getMaintenanceNeed() ? 'active' : ''  } radio image"></span>
                    { maintenance_need.name }
                </li>
            </ul>
        </div>
        <div class="form-group">
            <label>{ technical_classes.display }</label>
            <small class="form-text text-muted">{ window.gettext("Choose road link technical class according to the 2010 Road Geometric Design Standards, DRBFC standards") }</small>
            <ul class="technical-class">
                <li each="{ technical_class in technical_classes.options }" data-technical="{ technical_class.code }" onclick="{ checkTechnicalClass }">
                    <span class="{ technical_class.code == state.editingRoad.getTechnicalClass() ? 'active' : ''  } radio image"></span>
                    { technical_class.name }
                </li>
            </ul>
        </div>
        <div class="form-group">
            <label>{ traffic_data.display }</label>
            <small class="form-text text-muted">{ window.gettext("Choose the traffic volume for the road link") }</small>
            <ul class="traffic-data">
                <li each="{ traffic in traffic_data.options }" data-traffic="{ traffic[0] }" onclick="{ checkTrafficData }">
                    <span class="{ traffic[0] === state.editingRoad.getTrafficLevel() ? 'active' : ''  } radio image"></span>
                    { traffic[1] }
                </li>
            </ul>
        </div>
    </section>

    <div class="button-wrapper d-flex justify-content-end">
        <button class="btn btn-primary" onclick="{ save }" disabled={ !hasChanges() }>Save and continue</button>
    </div>

    <script>
        import { saveRoad } from "../roadManager";
        import Edit_Feedback from './edit_feedback.riot';

        export default {
            components: {
                Edit_Feedback
            },
            state: {
                show_feedback: false,
                error: null,
                hasChanges: false,
            },
            onBeforeMount(props, state) {
                state.editingRoad = props.road.cloneMessage();
                document.addEventListener('estrada.table.roadMetaDataUpdated', (data) => {
                    this.state.editingRoad = data.detail.road;
                    this.update();
                });
            },
            checkChanges() {
                const hasChanges = this.state.editingRoad.toString() !== this.props.road.toString();
                if( hasChanges !== this.state.hasChanges ) {
                    this.state.hasChanges = hasChanges;
                    this.props.onChange(hasChanges);
                }
                return hasChanges;
            },
            checkSurfaceCondition(e) {
                this.state.editingRoad.setSurfaceCondition(e.currentTarget.dataset.condition);
                this.update();
            },
            checkMaintenanceNeed(e) {
                this.state.editingRoad.setMaintenanceNeed(e.currentTarget.dataset.maintenance);
                this.update();
            },
            checkTechnicalClass(e) {
                this.state.editingRoad.setTechnicalClass(e.currentTarget.dataset.technical);
                this.update();
            },
            checkTrafficData(e) {
                this.state.editingRoad.setTrafficLevel(e.currentTarget.dataset.traffic);
                this.update();
            },
            save(e) {
                var save_button = e.currentTarget;
                save_button.disabled = true;

                saveRoad(this.state.editingRoad).then((response) => {
                    if (response) { this.state.error = false; }
                    else { this.state.error = true; }
                }).catch(err => {
                    this.state.error = true;
                }).finally(() => {
                    save_button.disabled = false;
                    this.state.show_feedback = true;
                    this.update();
                });
            },
            conditions: window.road_schema.surface_condition,
            maintenance_needs: window.road_schema.maintenance_need,
            technical_classes: window.road_schema.technical_class,
            traffic_data: window.road_schema.traffic_level,
        }
    </script>
</edit_condition>
