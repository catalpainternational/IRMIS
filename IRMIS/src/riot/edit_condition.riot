<edit_condition>
    <div class="content-wrapper">
        <div class="d-flex justify-content-between">
            <h5>{ window.gettext("Surface Condition Data (SDI)") }</h5>
            <button class="btn btn-primary" onclick="{ addEdit }" disabled="{ props.editing }">
                { window.gettext("Add") }
            </button>
        </div>

        <stacked_bar id="{identifiers.asset_condition.stackedBarId}" entries="{state.assetConditions}"
            total_title="{window.gettext('Total road chainage')}">
        </stacked_bar>

        <div class="d-flex">
            <a class="{state.viewAllAssetCondition ? 'active' : '' } table-toggle"
                onclick="{viewCurrentAssetCondition}">
                { window.gettext("Current surface condition") }
            </a>
            <a class="{!state.viewAllAssetCondition ? 'active' : '' } table-toggle" onclick="{viewAllAssetCondition}">
                { window.gettext("View all data entries") }
            </a>
        </div>
        <data_table if="{state.viewAllAssetCondition}" table_id="{identifiers.asset_condition.allDataTableId}"
            columns="{all_data_table_columns}" columnSortOrder="{all_data_table_columns_order}"
            getHelpText="{props.parent.getHelpText}" pendingRows="{state.pendingRows}" canorder candelete>
        </data_table>
        <data_table if="{!state.viewAllAssetCondition}" table_id="{identifiers.asset_condition.reportDataTableId}"
            columns="{current_data_table_columns}" columnSortOrder="{current_data_table_columns_order}"
            getHelpText="{props.parent.getHelpText}" pendingRows="{state.pendingRows}" canorder>
        </data_table>
    </div>

    <edit_modal modal_id="{modal_id}" disableSave="{!state.canSave}">
        <span slot="modal_title">{window.gettext("Add Surface Condition Information")}</span>

        <form slot="modal_body">
            <section>
                <div class="form-group">
                    <label>{ window.gettext("Survey Date") }</label>
                    <span class="required">*</span>
                    <small class="form-text text-muted">{props.parent.getHelpText("survey_date")}</small>
                    <!-- It would be preferable to use the 'datetime-local' input type, however Firefox currently does not support it -->
                    <input
                        class="{state.errors.surveyDate ? 'danger' : null } { state.survey.surveyDate ? '' : 'inactive' } form-control"
                        type="date" name="surveyDate" placeholder="Date" value="{state.survey.surveyDate}"
                        oninput="{checkSurveyDate}" required pattern="\d{4}-\d{2}-\d{2}" max="{max_date()}">
                    <div if="{state.errors.surveyDate}" class="invalid-tooltip">
                        <ul>
                            <li>{ state.errors.surveyDate }.</li>
                        </ul>
                    </div>
                </div>
            </section>

            <section>
                <h6>{ window.gettext("Chainage") }</h6>
                <div class="form-group">
                    <label>{ window.gettext("Chainage start") } (m)</label>
                    <span class="required">*</span>
                    <small class="form-text text-muted">{ props.parent.getHelpText("start_chainage") }</small>
                    <input
                        class="{state.errors.startChainage ? 'danger' : null } { state.survey.startChainage ? '' : 'inactive' } form-control"
                        type="number" name="startChainage" placeholder="1000" value="{state.survey.startChainage}"
                        oninput="{checkChainage}" min="0" max="999998" step="1" required>
                    <div if="{state.errors.startChainage}" class="invalid-tooltip">
                        <ul>
                            <li>{ state.errors.startChainage }.</li>
                        </ul>
                    </div>
                </div>
                <div class="form-group">
                    <label>{ window.gettext("Chainage end") } (m)</label>
                    <span class="required">*</span>
                    <small class="form-text text-muted">{ props.parent.getHelpText("end_chainage") }</small>
                    <input
                        class="{state.errors.endChainage ? 'danger' : null } { state.survey.endChainage ? '' : 'inactive' } form-control"
                        type="number" name="endChainage" placeholder="62410" value="{state.survey.endChainage}"
                        oninput="{checkChainage}" min="1" max="999999" step="1" required>
                    <div if="{state.errors.endChainage}" class="invalid-tooltip">
                        <ul>
                            <li>{ state.errors.endChainage }.</li>
                        </ul>
                    </div>
                </div>
            </section>

            <section>
                <h6>{ window.gettext("Condition") }</h6>
                <div class="form-group">
                    <label>{conditions.display}</label>
                    <span class="required">*</span>
                    <small class="form-text text-muted">{props.parent.getHelpText("asset_condition")}</small>
                    <ul class="asset-condition">
                        <li each="{condition in conditions.options}" data-condition="{condition[0]}"
                            onclick="{checkAssetCondition}">
                            <span
                                class="{condition[0] == state.survey.assetCondition ? 'active' : ''  } radio image"></span>
                            { condition[1] }
                        </li>
                    </ul>
                    <div if="{state.errors.assetCondition}" class="invalid-tooltip">
                        <ul>
                            <li>{ state.errors.assetCondition }.</li>
                        </ul>
                    </div>
                </div>
            </section>
            <section>
                <h6>{ window.gettext("Upload Photos and Videos") }</h6>
                <label>{ window.gettext("Photo/Video 1") }</label>
                <upload_media mediaId="{ mediaId1 }" media="{ state.media1 }" fkLink="{ props.fkLink }" surveyMedia="{ true }" showFeedback="{ props.showFeedback }"></upload_media>
                <label>{ window.gettext("Photo/Video 2") }</label>
                <upload_media mediaId="{ mediaId2 }" media="{ state.media2 }" fkLink="{ props.fkLink }" surveyMedia="{ true }" showFeedback="{ props.showFeedback }"></upload_media>
                <label>{ window.gettext("Photo/Video 3") }</label>
                <upload_media mediaId="{ mediaId3 }" media="{ state.media3 }" fkLink="{ state.fkLink }" surveyMedia="{ true }" showFeedback="{ props.showFeedback }"></upload_media>
            </section>

            <div class="d-flex justify-content-end">
                <span>[</span><span class="required">*</span><span>]: Mandatory</span>
            </div>
        </form>
    </edit_modal>

    <edit_stop_alert modalId="delete-alert" title="{window.gettext('Delete')}"
        description="{window.gettext('Are you sure you want to delete this data entry?')}"
        proceedLabel="{window.gettext('Delete')}" proceedResult="delete" stopLabel="{window.gettext('Don\'t delete')}"
        stopResult="keep">
    </edit_stop_alert>

    <div id="media-modal" class="modal inventory-modal" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title">{ window.gettext("Road Conditions Media") }</h1>
                    <span class="close image" data-dismiss="modal" aria-label="{ window.gettext('Close') }"
                        aria-hidden="true"></span>
                </div>
                <div class="modal-body">
                    <div id="inventory-media_wrapper">
                        <media_details_box></media_details_box>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        import Edit_Stop_Alert from "./edit_stop_alert.riot";
        import Data_Table from "./data_table.riot";
        import Edit_Modal from "./edit_modal.riot";
        import Stacked_Bar from "./stacked_bar.riot";
        import Upload_Media from "./upload_media.riot";

        import {putMediaData, deleteMediaData} from "../assets/mediaAPI";
        import {createSurvey, deleteSurvey, updateSurvey} from "../surveyManager";
        import {checkRequiredFields, surveysAndReportRefresh} from "../assets/editUtilities";
        import {choice_or_default, toChainageFormat} from "../assets/protoBufUtilities";
        import {withinMaxDigits} from "../assets/utilities";

        import {ASSET_CONDITION_CHOICES} from "../assets/models/choices";
        import {makeEstradaRoad} from "../assets/models/road";
        import {EstradaSurvey, makeEstradaSurvey} from "../assets/models/survey";

        import $ from "jquery";

        export default {
            state: {
                chainageDigits: 6,
                baseSurvey: new EstradaSurvey({}),
                survey: {},
                canSave: false,
                errors: {},
                pendingRows: [],
                assetConditions: [{key: 0, title: "unknown", distance: 0, percent: 100, label: window.gettext("Loading")}],
                surveyTotalDistance: 0,
                reportRows: [],
                viewAllAssetCondition: false,
                editMode: false,
                currentRowData: new EstradaSurvey({}),
                mediaLinkQueue: [],
            },
            components: {
                Edit_Stop_Alert, Edit_Modal, Stacked_Bar, Upload_Media
            },
            identifiers: {
                asset_condition: {
                    allDataTableId: "asset-condition-table",
                    primaryAttribute: "asset_condition",
                    reportAttribute: "assetConditions",
                    reportDataTableId: "asset-condition-report-table",
                    stackedBarId: "asset-condition-stacked-bar",
                },
            },
            // Condition Survey
            onMounted(props, state) {
                state.road = makeEstradaRoad(props.road);

                state.survey.media = state.survey.media || [];
                if (state.survey.media.length > 0) {
                    state.media1 = state.survey.media[0] ? state.survey.media[0] : undefined;
                    state.media2 = state.survey.media[1] ? state.survey.media[1] : undefined;
                    state.media3 = state.survey.media[2] ? state.survey.media[2] : undefined;
                }

                this.mediaNeedsLinkingListener = (data) => {
                    const newMedia = data.detail.media;
                    this.state.mediaLinkQueue = this.state.mediaLinkQueue.filter(p => {
                        if (p.getId() != newMedia.getId()) {return p;};
                    }).concat(newMedia);
                }
                document.addEventListener(`${this.mediaId1}.mediaNeedsLinking`, this.mediaNeedsLinkingListener);
                document.addEventListener(`${this.mediaId2}.mediaNeedsLinking`, this.mediaNeedsLinkingListener);
                document.addEventListener(`${this.mediaId3}.mediaNeedsLinking`, this.mediaNeedsLinkingListener);

                this.mediaNeedsRemovalListener = (data) => {
                    const oldMedia = data.detail.media;
                    this.state.mediaLinkQueue = this.state.mediaLinkQueue.filter(p => {
                        if (p.getId() != oldMedia.getId()) {return p};
                    });
                }
                document.addEventListener(`${this.mediaId1}.mediaNeedsRemoval`, this.mediaNeedsRemovalListener);
                document.addEventListener(`${this.mediaId2}.mediaNeedsRemoval`, this.mediaNeedsRemovalListener);
                document.addEventListener(`${this.mediaId3}.mediaNeedsRemoval`, this.mediaNeedsRemovalListener);

                this.deleteListener = (data) => {
                    const rowId = data.detail.rowId;
                    this.showStopAlertModal("delete-alert", rowId);
                };

                const refreshPromises = [];
                Object.keys(this.identifiers).forEach((idSet) => {
                    this.identifiers[idSet].emptyAttributes = this.props.parent.emptyAttributes;
                    refreshPromises.push(surveysAndReportRefresh(state, this.identifiers[idSet]));
                });

                Promise.all(refreshPromises).then((results) => {
                    Object.keys(this.identifiers).forEach((idSet) => {
                        document.addEventListener(`${this.identifiers[idSet].allDataTableId}.deleteRow`, this.deleteListener);
                    });
                    this.update();
                });
            },
            onUnmount(props, state) {
                document.removeEventListener(`${this.all_data_table_id}.deleteRow`, this.deleteListener);
                document.removeEventListener(`${this.mediaId1}.mediaNeedsLinking`, this.mediaNeedsLinkingListener);
                document.removeEventListener(`${this.mediaId2}.mediaNeedsLinking`, this.mediaNeedsLinkingListener);
                document.removeEventListener(`${this.mediaId3}.mediaNeedsLinking`, this.mediaNeedsLinkingListener);
                document.removeEventListener(`${this.mediaId1}.mediaNeedsRemoval`, this.mediaNeedsRemovalListener);
                document.removeEventListener(`${this.mediaId2}.mediaNeedsRemoval`, this.mediaNeedsRemovalListener);
                document.removeEventListener(`${this.mediaId3}.mediaNeedsRemoval`, this.mediaNeedsRemovalListener);

                Object.keys(this.identifiers).forEach((idSet) => {
                    document.removeEventListener(`${this.identifiers[idSet].allDataTableId}.deleteRow`, this.deleteListener)
                });
            },
            viewChange(identifierSet) {
                this.update();
                surveysAndReportRefresh(this.state, identifierSet);
            },
            viewAllAssetCondition(e) {
                if (!this.state.viewAllAssetCondition) {
                    this.state.viewAllAssetCondition = true;
                    this.viewChange(this.identifiers["asset_condition"]);
                }
            },
            viewCurrentAssetCondition(e) {
                if (this.state.viewAllAssetCondition) {
                    this.state.viewAllAssetCondition = false;
                    this.viewChange(this.identifiers["asset_condition"]);
                }
            },
            addEdit(e) {
                // TODO:
                // baseSurvey must be set to 'empty' for add.
                // and the selected segment survey for edit.
                this.state.survey = makeEstradaSurvey(this.state.baseSurvey);
                this.state.errors = {};

                this.showEditModal();
            },
            mediaId1: "assetConditionSurveyMedia1",
            mediaId2: "assetConditionSurveyMedia2",
            mediaId3: "assetConditionSurveyMedia3",
            conditions: window.asset_schema.asset_condition,
            stacked_bar_id: "asset-condition-stacked-bar",
            current_data_table_id: "asset-condition-report-table",
            conditions: window.asset_schema.asset_condition,
            current_data_table_columns_order: [[0, 'asc']],
            current_data_table_columns: [
                {
                    title: window.gettext("Chainage start"),
                    data: "chainageStart",
                    defaultContent: "",
                    className: "text-right",
                    render: (data, type) => {
                        return (type === 'display') ? toChainageFormat(data) : data;
                    },
                },
                {
                    title: window.gettext("Chainage end"),
                    data: "chainageEnd",
                    defaultContent: "",
                    className: "text-right",
                    orderable: false,
                    render: (data, type) => {
                        return (type === 'display') ? toChainageFormat(data) : data;
                    },
                },
                {
                    title: window.gettext("Surface condition"),
                    data: "assetCondition",
                    defaultContent: "",
                    className: "text-center",
                    orderable: false,
                },
                {
                    title: window.gettext("Survey date"),
                    data: "dateSurveyed",
                    defaultContent: "",
                    className: "text-center",
                    orderable: false,
                },
                {
                    title: window.gettext("Added by"),
                    data: "addedBy",
                    defaultContent: "",
                    orderable: false,
                },
            ],
            all_data_table_columns_order: [[3, 'desc'], [0, 'asc']],
            all_data_table_columns: [
                {
                    title: window.gettext("Chainage start"),
                    data: "chainageStart",
                    defaultContent: "",
                    className: "text-right",
                    render: (data, type) => {
                        return (type === 'display') ? toChainageFormat(data) : data;
                    },
                },
                {
                    title: window.gettext("Chainage end"),
                    data: "chainageEnd",
                    defaultContent: "",
                    className: "text-right",
                    orderable: false,
                    render: (data, type) => {
                        return (type === 'display') ? toChainageFormat(data) : data;
                    },
                },
                {
                    title: window.gettext("Surface condition"),
                    data: "assetCondition",
                    defaultContent: "",
                    className: "text-center",
                    orderable: false,
                    render: (data, type) => {
                        return (type === 'display') ? choice_or_default(data, ASSET_CONDITION_CHOICES) : data;
                    },
                },
                {
                    title: window.gettext("Photos/Videos"),
                    data: null,
                    defaultContent: "",
                    render: (data, type, row) => {
                        const title = window.gettext("View Photos/Videos");
                        return (row.media.length) ? `<a onclick="document.dispatchEvent(new CustomEvent('asset-condition-table.showSurveyMedia',{detail:{rowId:${row.id}}}))">${title}</a>` : "";
                    },
                    className: "text-center",
                    orderable: false,
                },
                {
                    title: window.gettext("Survey date"),
                    data: "dateSurveyed",
                    defaultContent: "",
                    className: "text-center",
                },
                {
                    title: window.gettext("Added by"),
                    data: "addedBy",
                    defaultContent: "",
                    orderable: false,
                },
                {
                    // To add a 'Delete' button include the attribute candelete
                    // on the Riot dataTable tag as well
                    title: window.gettext("Delete"),
                    name: "Option", // Do NOT translate this
                    defaultContent: "",
                    className: "text-center",
                    orderable: false,
                },
            ],

            // Survey Modal

            requiredFieldNames: ["surveyDate", "startChainage", "endChainage", "assetCondition"],
            showEditModal() {
                document.addEventListener(`${this.modal_id}.result`, (data) => {
                    const modalResult = data.detail.result;

                    switch (modalResult) {
                        case "save":
                            if (this.hasChanges()) {
                                this.save();
                            }
                            break;
                        case "cancel":
                            this.discardChanges();
                            break;
                        default:
                            if (this.hasChanges()) {
                                this.showStopAlertModal("stop-alert");
                            }
                            break;
                    }
                }, {once: true});

                $(`#${this.modal_id}`).modal("show");
            },
            showStopAlertModal(modalId, rowId, tableId) {
                const eventName = `edit.${modalId}.result`;

                document.addEventListener(eventName, (data) => {
                    const stopAlertResult = data.detail.result;
                    $(`#${modalId}`).modal("hide");

                    if (stopAlertResult === "discard") {
                        this.discardChanges();
                    } else if (stopAlertResult === "delete") {
                        this.state.editMode = true;
                        // Coming out of the stop-alert modal we want to re-establish the data-table
                        const eventName = `${tableId}.getRowData`;
                        const eventDetail = {detail: {rowId: rowId, state: this.state}};
                        document.dispatchEvent(new CustomEvent(eventName, eventDetail));

                        // void the survey asset_condition value and save
                        if (this.state.currentRowData) {
                            this.state.survey = this.state.currentRowData;
                            this.state.survey.setId(rowId);
                            this.state.survey.setAssetId("ROAD-" + this.state.road.id);
                            this.state.survey.setAssetCode(this.state.road.code);
                            this.state.survey.setValues(JSON.stringify({}));
                            this.saveSurvey();
                        }
                        this.state.editMode = false;
                    } else if (stopAlertResult === "continueEdit") {
                        this.showEditModal();
                    }
                }, {once: true});

                $(`#${modalId}`).modal("show");
            },
            discardChanges() {
                $(`#${this.modal_id}`).modal("hide");
                this.update({
                    survey: makeEstradaSurvey(this.state.baseSurvey),
                    mediaLinkQueue: [],
                    errors: {},
                });
                this.clearMedias();
            },
            save(e) {
                const missingFieldNames = checkRequiredFields(this.requiredFieldNames, this.state.survey);

                if (Object.keys(this.state.errors).length) {
                    // Cannot save if there are validation errors
                    this.canSave();

                    if (!this.state.canSave) {
                        missingFieldNames.forEach((fieldName) => {
                            if (!data[fieldName]) {
                                errors[fieldName] = window.gettext("This field is required");
                            }
                        });
                        this.showEditModal();
                    }
                } else {
                    if (this.hasChanges()) {
                        // Complete the survey
                        this.state.survey.setUser($("#user_welcome").data("userId") || 0);
                        this.state.survey.setSource("Estrada");
                        this.state.survey.setChainageStart(this.state.survey.startChainage);
                        this.state.survey.setChainageEnd(this.state.survey.endChainage);
                        this.state.survey.setValues(JSON.stringify({
                            asset_condition: this.state.survey.assetCondition
                        }));
                        // If we're here we will have a user entered surveyDate, even so Date.now() is still used as a fall back
                        const dateSurveyed = new proto.google.protobuf.Timestamp();
                        const surveyDate = new Date(this.state.survey.surveyDate || Date.now().toISOString());
                        dateSurveyed.fromDate(surveyDate);

                        this.state.survey.setDateSurveyed(dateSurveyed);

                        // set Survey road from state Road road_code
                        this.state.survey.setAssetId("ROAD-" + this.state.road.id);
                        this.state.survey.setAssetCode(this.state.road.code);

                        this.saveSurvey();
                    }

                    // Reset baseSurvey now that we're done.
                    this.baseSurvey = new EstradaSurvey({});

                    $(`#${this.modal_id}`).modal("hide");
                }
            },
            saveSurvey() {
                $(`#${this.modal_id}`).modal("hide");
                $("#asset-manager-loading").modal("show");

                this.state.survey.media = this.state.mediaLinkQueue;
                const surveyPromise = (!this.state.editMode)
                    ? createSurvey(this.state.survey)
                    : updateSurvey(this.state.survey);

                const identifierSet = this.identifiers["asset_condition"];

                surveyPromise
                    .then((surveyData) => {
                        surveysAndReportRefresh(this.state, identifierSet).then((result) => {
                            this.update({
                                survey: new EstradaSurvey({}), // clear input values
                            });
                            this.props.showFeedback();
                        });
                    })
                    .catch((err) => {
                        this.props.showFeedback(true);
                    })
                    .finally((r) => {
                        $("#asset-manager-loading").modal("hide");
                    });

                // clear input values
                this.state.survey = new EstradaSurvey({});
                this.update();
            },
            canSave() {
                const missingFieldNames = checkRequiredFields(this.requiredFieldNames, this.state.survey);

                if (missingFieldNames.length || Object.keys(this.state.errors).length) {
                    // Cannot save if there are validation errors
                    this.state.canSave = false;
                } else {
                    // Can save if something has changed
                    this.state.canSave = JSON.stringify(this.state.baseSurvey) !== JSON.stringify(this.state.survey);
                }

                this.update();
            },
            /** Compare the selected fields between baseSurvey and survey.
             * `source` and `user` are deliberately not compared
             */
            hasChanges() {
                const compareFieldNames = ["surveyDate", "startChainage", "endChainage", "assetCondition"];
                const surveyBase = compareFieldNames.map((fieldName) => {return this.state.baseSurvey[fieldName] || "";}).join("|||");
                const surveyResult = compareFieldNames.map((fieldName) => {return this.state.survey[fieldName] || "";}).join("|||");

                return (surveyBase !== surveyResult);
            },
            validate(fieldName, input, testResult, errorText) {
                if (!testResult) {
                    this.state.errors[fieldName] = errorText;
                } else {
                    delete this.state.errors[fieldName];
                    this.state.survey[fieldName] = input;
                }

                this.canSave();
            },
            checkSurveyDate(e) {
                const fieldName = e.currentTarget.name;
                const input = e.currentTarget.value;
                const testResult = input <= this.max_date();
                const errorText = window.gettext("Survey date cannot be in the future");

                this.validate(fieldName, input, testResult, errorText);
            },
            checkChainage(e) {
                const fieldName = e.currentTarget.name;
                const nominalInput = Number(e.currentTarget.value);
                const input = e.currentTarget.value;

                const nominalStart = fieldName === "startChainage" ? 0 : (parseInt(this.state.survey.startChainage, 10) || 0) + 1;
                const nominalEnd =  fieldName === "endChainage" ? 999999 : (parseInt(this.state.survey.endChainage, 10) || 999999) - 1;

                const chainageError = !withinMaxDigits(input, this.state.chainageDigits)
                    ? window.gettext(`Chainage cannot contain more than ${this.state.chainageDigits} digits and value shouldn't contain decimals`)
                    : "";
                const rangeError = !(nominalInput >= nominalStart && nominalInput <= nominalEnd)
                    ? window.gettext(`Chainage must be greater than or equal to ${nominalStart} and less than or equal to ${nominalEnd}`)
                    : "";

                const testResult = !(chainageError || rangeError);
                const errorText = `${chainageError} ${rangeError}`.trim();

                this.validate(fieldName, input, testResult, errorText);
            },
            checkAssetCondition(e) {
                this.state.survey.assetCondition = e.currentTarget.dataset.condition;
                this.canSave();
            },
            clearMedias() {
                document.dispatchEvent(new CustomEvent(`${this.mediaId1}.mediaCleared`, {}));
                document.dispatchEvent(new CustomEvent(`${this.mediaId2}.mediaCleared`, {}));
                document.dispatchEvent(new CustomEvent(`${this.mediaId3}.mediaCleared`, {}));
            },
            modal_id: "asset-condition-modal",
            max_date: () => new Date().toISOString().substring(0, 10),
        }
    </script>
</edit_condition>
