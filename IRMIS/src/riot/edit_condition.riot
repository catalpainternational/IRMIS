<edit_condition>
    <edit_modal disableSave="{ !state.canSave }" onSave="{ props.onSaveSurvey }">
        <span slot="modal_title">Add Surface Condition Information</span>

        <form slot="modal_body">
            <section>
                <div class="form-group">
                    <label>{ window.gettext("Survey Date") }</label>
                    <small class="form-text text-muted">{props.getHelpText("survey_date")}</small>
                    <input class="{ state.errors.surveyDate ? 'danger' : null } { state.survey.surveyDate ? '' : 'inactive' } form-control"
                        type="date" name="surveyDate" placeholder="Date" value="{ state.survey.surveyDate }" oninput="{ checkSurveyDate }">
                    <div if="{ state.errors.surveyDate }" class="invalid-tooltip">
                        <ul>
                            <li>{ state.errors.surveyDate }.</li>
                        </ul>
                    </div>
                </div>
            </section>

            <section>
                <h6>{ window.gettext("Chainage") }</h6>
                <div class="form-group">
                    <label>{ window.gettext("Chainage start") }</label>
                    <input class="{ state.errors.startChainage ? 'danger' : null } { state.survey.startChainage ? '' : 'inactive' } form-control"
                        type="number" name="startChainage" placeholder="0+000" value="{ state.survey.startChainage }" oninput="{ checkChainage }">
                    <small class="form-text text-muted">{ props.getHelpText("start_chainage") }</small>
                    <div if="{ state.errors.startChainage }" class="invalid-tooltip">
                        <ul>
                            <li>{ state.errors.startChainage }.</li>
                        </ul>
                    </div>
                </div>
                <div class="form-group">
                    <label>{ window.gettext("Chainage end") }</label>
                    <input class="{ state.errors.endChainage ? 'danger' : null } { state.survey.endChainage ? '' : 'inactive' } form-control"
                        type="number" name="endChainage" placeholder="62+410" value="{ state.survey.endChainage }" oninput="{ checkChainage }">
                    <small class="form-text text-muted">{ props.getHelpText("end_chainage") }</small>
                    <div if="{ state.errors.endChainage }" class="invalid-tooltip">
                        <ul>
                            <li>{ state.errors.endChainage }.</li>
                        </ul>
                    </div>
                </div>
            </section>

            <section>
                <h6>{ window.gettext("Condition") }</h6>
                <div class="form-group">
                    <label>{conditions.display}</label>
                    <small class="form-text text-muted">{props.getHelpText("surface_condition")}</small>
                    <ul class="surface-condition">
                        <li each="{ condition in conditions.options }" data-condition="{ condition[0] }" onclick="{ checkSurfaceCondition }">
                            <span class="{ condition[0] == state.survey.surfaceCondition ? 'active' : ''  } radio image"></span>
                            { condition[1] }
                        </li>
                    </ul>
                </div>
            </section>
        </form>
    </edit_modal>

    <h5>{ window.gettext ("Condition") }</h5>
    <section>
        <div class="form-group">
            <div class="button-wrapper d-flex justify-content-end">
                <button class="btn btn-primary" onclick="{ edit }" disabled="{ props.editing }">{ window.gettext("Add") }</button>
            </div>
        </div>
        <data_table table_id={this.table_id} columns={this.table_columns} getHelpText={props.getHelpText} pendingRows={this.pendingRows}></data_table>
    </section>

    <script>
        import Data_Table from "./data_table.riot";
        import Edit_Modal from "./edit_modal.riot";

        import { getRoadSurveys } from "../surveyManager"
        import { getFieldName } from "../road";

        import $ from "jquery";

        function checkRequiredFields(fieldNames, data, errors) {
            fieldNames.forEach((fieldName) => {
                if (!data[fieldName]) {
                    errors[fieldName] = window.gettext("This field is required");
                }
            });
        }

        function withinMaxDigits(text, limit, decimals) {
            return (new RegExp(`^\\d{0,${(limit - decimals)}}(\\.\\d{1,${decimals}})?$`).test(text));
        }

        /** Deep copy the supplied data to a new object
         *  Prefers to use protobuf .cloneMessage
         */
        function cloneData(data) {
            if (data.cloneMessage) {
                return data.cloneMessage();
            }

            return JSON.parse(JSON.stringify(this.state.baseSurvey));
        }

        export default {
            state: {
                chainageDecimals: 3,
                chainageDigits : 7,
                baseSurvey: {},
                survey: {},
                canSave: false,
                errors: {},
                pendingRows: [],
            },

            // Condition Survey

            onMounted(props, state) {
                state.loading = true;
                state.road = cloneMessage(props.road);
                this.getRoadSurveys();
            },
            getRoadSurveys() {
                const roadCode = this.state.road.getId();
                getRoadSurveys(roadCode)
                    .then((surveyData) => {
                        if (surveyData) {
                            this.state.pendingRows = surveyData;
                            const pendingRows = this.state.pendingRows;
                            document.dispatchEvent(new CustomEvent(`${this.table_id}.dataAdded`, {detail: { pendingRows }}));
                            this.state.error = false;
                        } else {
                            this.state.error = true;
                        }
                    }).catch(err => {
                        this.state.error = true;
                    }).finally((r) => {
                        this.state.loading = false;
                        this.update();
                    });
            },
            edit(e) {
                this.state.survey = cloneData(this.state.baseSurvey);
                $("#editModal").modal("show")
            },
            conditions: window.road_schema.surface_condition,
            table_id: "surface-condition-table",
            table_columns: [
                {
                    title: "Chainage start", 
                    data: "chainageStart",
                    defaultContent: "",
                },
                {
                    title: "Chainage end", 
                    data: "chainageEnd",
                    defaultContent: "",
                },
                {
                    title: "Surface condition", 
                    data: "surfaceCondition",
                    defaultContent: "",
                },
                {
                    title: "Survey date",
                    data: "dateSurveyed",
                    defaultContent: "",
                },
                {
                    title: "Added by", 
                    data: "user",
                    defaultContent: "",
                },
                {
                    title: "Source", 
                    data: "source",
                    defaultContent: "",
                },
            ],

            // Survey Modal 

            save(e) {
                const fieldNames = ["surveyDate", "startChainage", "endChainage", "surfaceCondition"];
                checkRequiredFields(fieldNames, this.state.survey, this.state.errors);

                if (Object.keys(this.state.errors).length) {
                    // Cannot save if there are validation errors
                    this.canSave();
                } else {
                    this.props.onSave();
                }
            },
            canSave() {
                if (Object.keys(this.state.errors).length) {
                    // Cannot save if there are validation errors
                    this.state.canSave = false;
                } else {
                    // Can save if something has changed
                    this.state.canSave = JSON.stringify(this.state.baseSurvey) !== JSON.stringify(this.state.survey);
                }
                
                this.update();
            },
            validate(fieldName, input, testResult, errorText) {
                if (!testResult) {
                    this.state.errors[fieldName] = errorText;                    
                } else {
                    delete this.state.errors[fieldName];
                    this.state.survey[fieldName] = input;
                }

                this.canSave();
            },
            checkSurveyDate(e) {
                const fieldName = e.currentTarget.name;
                const input = e.currentTarget.value;
                const testResult = input > Date.now;
                const errorText = window.gettext("Survey date cannot be in the future");

                this.validate(fieldName, input, test, errorText );
            },
            checkChainage(e) {
                const fieldName = e.currentTarget.name;
                const input = e.currentTarget.value;
                const chainageDigits = this.state.chainageDigits;
                const chainageDecimals = this.state.chainageDecimals;
                const testResult = withinMaxDigits(input, chainageDigits, chainageDecimals);
                const errorText = window.interpolate(
                    window.gettext("Chainage cannot contain more than %s digits, of which %s are decimals"),
                    [chainageDigits, chainageDecimals]);

                this.validate(fieldName, input, testResult, errorText);
            },
            checkSurfaceCondition(e) {
                this.state.survey.surfaceCondition = e.currentTarget.dataset.condition;
                this.update();
            },
        }
    </script>
</edit_condition>
