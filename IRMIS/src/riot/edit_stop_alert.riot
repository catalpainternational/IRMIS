<edit_stop_alert>
    <div id="stop-alert" class="modal" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-dialog-centered modal-sm" role="document">
            <div class="align-items-center modal-content">
                <div class="modal-header">
                    <span class="alert stop image"></span>
                    <span class="close image" data-dismiss="modal" onclick="{ close }" aria-label="{ window.gettext("Close") }" aria-hidden="true"></span>
                </div>
                <div class="modal-body text-center">
                    <h6>{ window.gettext("Unsaved Changes") }</h6>
                    <p>{ window.gettext("You have unsaved changes made to this page which will be lost if you navigate away. Would you like to continue editing?") }</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" data-dismiss="modal" onclick="{ discard }">{ window.gettext("Discard") }</button>
                    <button type="button" class="btn btn-light" data-dismiss="modal" onclick="{ continueEdit }">{ window.gettext("Continue editing") }</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        import $ from "jquery";

        export default {
            selector: "#stop-alert",
            state: {
                result: null,
                selfAsModal: null,
            },
            onMounted(props, state) {
                state.selfAsModal = state.selfAsModal || $(this.selector);

                this.handleHide();
            },
            onUnmounted(props, state) {
                this.state.selfAsModal = this.state.selfAsModal || $(this.selector);
                this.state.selfAsModal.off("hide.bs.modal");
            },
            getResult() {
                return state.result || null;
            },
            handleHide() {
                this.state.selfAsModal.on("hide.bs.modal", this, function (e) {
                    const result = e.data.state.result || "";
                    document.dispatchEvent(new CustomEvent("edit.stop_alert.result", { detail: { result }}));
                });
            },
            close() {
                this.state.result = "close";
                this.state.selfAsModal.modal("hide");
            },
            discard() {
                this.state.result = "discard";
                this.state.selfAsModal.modal("hide");
            },
            continueEdit() {
                this.state.result = "continueEdit";
                this.state.selfAsModal.modal("hide");
            },
        }
    </script>
</edit_stop_alert>
