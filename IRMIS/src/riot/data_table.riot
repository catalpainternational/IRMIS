<data_table>
    <table if={ state.id } id={ state.id } class="d-block table table-bordered table-hover w-100"></table>

    <script>
        import { getHelpText } from "../road";
        import { datatableTranslations } from "../datatableTranslations";

        import "bootstrap/js/dist/modal";
        import $ from "jquery";

        let timeoutId = null;

        const initialiseStateFromProps = function(props, state) {
            state = state || {};

            state.loading = true;
            state.saving = false;
            state.error = false;
            state.hasChanges = false;
            state.showFeedback = false;

            state.canEdit = !!props.canedit;
            state.canDelete = !!props.candelete;

            state.id = props.table_id || "all-data-table";
            state.columns = props.columns || [];
            state.columnSortOrder = props.columnSortOrder || [[0, "asc"]];
            state.appendRows = true;
            state.pendingRows = props.pendingRows || [];
            state.pageLength = props.pageLength || 10;

            // Wraps the actual processing for 'dataAdded' event, and includes this tag's state
            state.dataAdded = (data) => processDataAdded(data, state);

            const optionColumns = state.columns.filter((column) => (column.name && column.name === "Option"));

            if (state.canEdit) {
                state.columnSortOrder.forEach((columnOrder) => {
                    columnOrder[0]++;
                });

                state.columns.unshift({
                    title: "",
                    data: null,
                    render: r => `<a class="image pencil" href="#edit/${r.getId()}/location_type"></a>`,
                    orderable: false,
                    className: "edit-col"
                });
            }

            if (state.canDelete && optionColumns.length === 1) {
                optionColumns[0].render = (data, type, row) => {
                    if (row.getAddedBy()) {
                        return row ? button_template("delete", button_event_template(state.id, "deleteRow", row.getId())) : "";
                    } else {
                        return "";
                    }
                };
            }
        }

        const button_template = function(buttonClass, clickAction) {
            return `<span class="${buttonClass} image" onclick="${clickAction}"></span>`;
        }

        const button_event_template = function(tableId, eventName, rowId) {
            return `document.dispatchEvent(new CustomEvent('${tableId}.${eventName}',{detail:{rowId:${rowId}}}))`;
        }

        const processDataAdded = function(data, state) {
            const pendingRows = data.detail.pendingRows;
            const haveAppendRows = typeof (data.detail.appendRows) === "boolean";
            const appendRows = haveAppendRows ? data.detail.appendRows : true;

            state.pendingRows = appendRows
                ? state.pendingRows.concat(pendingRows)
                : pendingRows;
            state.appendRows = appendRows;
            updateDataTable(state);

            data.stopPropagation();
        }

        const initialiseDataTable = function (state) {
            state.table = $(`#${state.id}`).DataTable({
                columns: state.columns,
                rowId: ".getId()",
                order: state.columnSortOrder,
                pageLength: state.pageLength,
                dom: `<'row'<'col-12'B>> + <'row'<'col-sm-12'tr>> + <'row'<'col-md-12 col-lg-5'i><'col-md-12 col-lg-7'p>>`, // https://datatables.net/reference/option/dom#Styling
                language: datatableTranslations,
                ajax: function (data, callback, settings) {
                    if (state.pendingRows.length) {
                        // add any rows the road manager has delivered before initialization
                        callback(state.pendingRows);
                        state.pendingRows = [];
                    }
                }
            });

            // add any rows the caller has delivered before initialization
            updateDataTable(state);
        }

        const updateDataTable = function (state) {
            if (state.pendingRows.length) {
                if (!state.appendRows) {
                    state.table.clear().rows.add(state.pendingRows).draw();
                } else {
                    state.table.rows.add(state.pendingRows).draw();
                }

                state.pendingRows = [];
            } else {
                if (!state.appendRows) {
                    // No pendingRows and we're not appending
                    // This is interpreted as 'clear the table'
                    state.table.clear().draw();
                }
            }
        }

        export default {
            onMounted(props, state) {
                initialiseStateFromProps(props, state);
                this.update();

                initialiseDataTable(state);
                document.addEventListener(`${state.id}.dataAdded`, state.dataAdded)
            },
            onBeforeUnmount(props, state) {
                document.removeEventListener(`${state.id}.dataAdded`, state.dataAdded);
            },
            getHelpText(field) {
                return getHelpText(field);
            }
        };
    </script>
</data_table>
