<edit_asset_details>
    <h5>{ window.gettext('Asset') }</h5>

    <section>
        <h6>{ window.gettext('Link code and name') }</h6>
        <div class="form-group">
            <label>{ window.gettext('Link Code') }</label>
            <input class="{ invalidLinkCode && invalidLinkCode.length ? 'danger' : null } form-control inactive" 
                type="text" maxlength="25" placeholder="{ window.gettext('E.g. A01-01') }" oninput="{ checkLinkCode }">
            <small class="form-text text-muted">{ window.gettext('Enter link code according to DRBFC standard') }</small>
            <div if="{ invalidLinkCode && invalidLinkCode.length }" class="invalid-tooltip">
                <ul>
                    <li each="{ message in invalidLinkCode }">{ message }.</li>
                </ul>
            </div>
        </div>
        <div class="form-group">
            <label>{ window.gettext('Link Start Name') }</label>
            <input class="form-control inactive" type="text" maxlength="150" 
                placeholder="{ window.gettext('E.g. Dili') }" oninput="{ checkStartName }">
            <small class="form-text text-muted">{ window.gettext('Enter the name of the link start location (municipal center, administrative post or nearest suco)') }</small>
        </div>
        <div class="form-group">
            <label>{ window.gettext('Link End Name') }</label>
            <input class="form-control inactive" type="text" maxlength="150" 
                placeholder="{ window.gettext('E.g. Manatuto') }" oninput="{ checkEndName }">
            <small class="form-text text-muted">{ window.gettext('Enter the name of the link end location (municipal center, administrative post or nearest suco)') }</small>
        </div>
    </section>

    <section>
        <h6>{ window.gettext('Link width and length') }</h6>
        <div class="form-group">
            <label>{ window.gettext('Link Length') }</label>
            <input class="{ invalidLinkLength && invalidLinkLength.length ? 'danger' : null } form-control inactive" 
                type="number" placeholder="{ window.gettext('E.g. 58.7') }" oninput="{ checkLinkLength }">
            <small class="form-text text-muted">{ window.gettext('Enter road link length (in Km)') }</small>
            <div if="{ invalidLinkLength && invalidLinkLength.length }" class="invalid-tooltip">
                <ul>
                    <li each="{ message in invalidLinkLength }">{ message }.</li>
                </ul>
            </div>
        </div>
        <div class="form-group">
            <label>{ window.gettext('Carriageway Width') }</label>
            <input class="{ invalidCarriageWidth && invalidCarriageWidth.length ? 'danger' : null } form-control inactive" 
                type="number" placeholder="{ window.gettext('E.g. 5.0') }" oninput="{ checkCarriagewayWidth }">
            <small class="form-text text-muted">{ window.gettext('Enter the width (in meters) of the link carriageway') }</small>
            <div if="{ invalidCarriageWidth && invalidCarriageWidth.length }" class="invalid-tooltip">
                <ul>
                    <li each="{ message in invalidCarriageWidth }">{ message }.</li>
                </ul>
            </div>
        </div>
    </section>

    <section>
        <h6>{ window.gettext('Link chainage') }</h6>
        <div class="form-group">
            <label>{ window.gettext('Link Start Chainage') }</label>
            <input class="{ invalidStartChainage && invalidStartChainage.length ? 'danger' : null } form-control inactive" 
                type="number" placeholder="{ window.gettext('E.g. 0+000') }" oninput="{ checkStartChainage }">
            <small class="form-text text-muted">{ window.gettext('Enter chainage for link starting point') }</small>
            <div if="{ invalidStartChainage && invalidStartChainage.length }" class="invalid-tooltip">
                <ul>
                    <li each="{ message in invalidStartChainage }">{ message }.</li>
                </ul>
            </div>
        </div>
        <div class="form-group">
            <label>{ window.gettext('Link End Chainage') }</label>
            <input class="{ invalidEndChainage && invalidEndChainage.length ? 'danger' : null } form-control inactive" 
                type="number" placeholder="{ window.gettext('E.g. 62+410') }" oninput="{ checkEndChainage }">
            <small class="form-text text-muted">{ window.gettext('Enter chainage for link ending point') }</small>
            <div if="{ invalidEndChainage && invalidEndChainage.length }" class="invalid-tooltip">
                <ul>
                    <li each="{ message in invalidEndChainage }">{ message }.</li>
                </ul>
            </div>
        </div>
    </section>

    <div class="button-wrapper d-flex justify-content-end">
        <button class="btn btn-primary" onclick="{ save }">{ window.gettext('Save and continue') }</button>
    </div>

    <script>
        export default {
            onBeforeMount() {
                this.linkLengthDecimals = 3;
                this.linkLengthDigits = 8;

                this.carriagewayWidthDecimals = 3;
                this.carriagewayWidthDigits = 5;

                this.linkChainageDecimals = 5;
                this.linkChainageDigits = 12;
            },
            checkLinkCode(e) {
                this.linkCode = e.currentTarget.value.trim();
                this.invalidLinkCode = [];
                if (containsWhiteSpaces(this.linkCode)) this.invalidLinkCode.push("Link code can't contain white spaces");
                this.update();
            },
            checkStartName(e) {
                this.startName = e.currentTarget.value;
            },
            checkEndName(e) {
                this.endName = e.currentTarget.value;
            },
            checkLinkLength(e) {
                this.linkLength = e.currentTarget.value;
                this.invalidLinkLength = [];
                if (exceedsMaxDigits(this.linkLength, this.linkLengthDigits, this.linkLengthDecimals)) this.invalidLinkLength.push("Link length can't contain more than " + this.linkLengthDigits + " digits, of which " + this.linkLengthDecimals + " are decimals");
                this.update();
            },
            checkCarriagewayWidth(e) {
                this.carriagewayWidth = e.currentTarget.value;
                this.invalidCarriageWidth = [];
                if (exceedsMaxDigits(this.carriagewayWidth, this.carriagewayWidthDigits, this.carriagewayWidthDecimals)) this.invalidCarriageWidth.push("Carriage width can't contain more than " + this.carriagewayWidthDigits + " digits, of which " + this.carriagewayWidthDecimals + " are decimals");
                this.update();
            },
            checkStartChainage(e) {
                this.startChainage = e.currentTarget.value;
                this.invalidStartChainage = [];
                if (exceedsMaxDigits(this.startChainage, this.linkChainageDigits, this.linkChainageDecimals)) this.invalidStartChainage.push("Link start chainage can't contain more than " + this.linkChainageDigits + " digits, of which " + this.linkChainageDecimals + " are decimals");
                this.update();
            },
            checkEndChainage(e) {
                this.endChainage = e.currentTarget.value;
                this.invalidEndChainage = [];
                if (exceedsMaxDigits(this.endChainage, this.linkChainageDigits, this.linkChainageDecimals)) this.invalidEndChainage.push("Link end chainage can't contain more than " + this.linkChainageDigits + " digits, of which " + this.linkChainageDecimals + " are decimals");
                this.update();
            },
            save(e) {
                var save_button = e.currentTarget;
                save_button.disabled = true;
                setTimeout(() => save_button.disabled = false, 1000); // An example of what to call when the (unimplemented) Promise is resolved

                const road = {
                    linkCode: this.linkCode,
                    startName: this.startName,
                    endName: this.endName,
                    linkLength: this.linkLength,
                    carriagewayWidth: this.carriagewayWidth,
                    startChainage: this.startChainage,
                    endChainage: this.endChainage,
                };
            }
        };

        function containsWhiteSpaces(text) {
            return /\s/.test(text);
        }

        function exceedsMaxDigits(text, limit, decimals) {
            return !(new RegExp("^\\d{0," + (limit - decimals) + "}(\\.\\d{1," + decimals + "})?$").test(text));
        }
    </script>
</edit_asset_details>
