<edit_asset_details>
    <h5>{ window.gettext("Asset") }</h5>

    <edit_feedback if="{ state.show_feedback }" error="{ state.error }"></edit_feedback>

    <section>
        <h6>{ window.gettext("Link code and name") }</h6>
        <div class="form-group">
            <label>{ window.gettext("Link Code") }</label>
            <input class="{ invalidLinkCode && invalidLinkCode.length ? 'danger' : null } form-control inactive"
                type="text" maxlength="25" placeholder="{ window.gettext("E.g. A01-01") }" value="{ state.editingRoad.getLinkCode() }" oninput="{ checkLinkCode }">
            <small class="form-text text-muted">{ window.gettext("Enter link code according to DRBFC standard") }</small>
            <div if="{ invalidLinkCode && invalidLinkCode.length }" class="invalid-tooltip">
                <ul>
                    <li each="{ message in invalidLinkCode }">{ message }.</li>
                </ul>
            </div>
        </div>
        <div class="form-group">
            <label>{ window.gettext("Link Start Name") }</label>
            <input class="form-control inactive" type="text" maxlength="150"
                placeholder="{ window.gettext("E.g. Dili") }" value="{ state.editingRoad.getLinkStartName() }" oninput="{ checkLinkStartName }">
            <small class="form-text text-muted">{ window.gettext("Enter the name of the link start location (municipal center, administrative post or nearest suco)") }</small>
        </div>
        <div class="form-group">
            <label>{ window.gettext("Link End Name") }</label>
            <input class="form-control inactive" type="text" maxlength="150"
                placeholder="{ window.gettext("E.g. Manatuto") }" value="{ state.editingRoad.getLinkEndName() }" oninput="{ checkLinkEndName }">
            <small class="form-text text-muted">{ window.gettext("Enter the name of the link end location (municipal center, administrative post or nearest suco)") }</small>
        </div>
    </section>

    <section>
        <h6>{ window.gettext("Link width and length") }</h6>
        <div class="form-group">
            <label>{ window.gettext("Link Length") }</label>
            <input class="{ invalidLinkLength && invalidLinkLength.length ? 'danger' : null } form-control inactive"
                type="number" placeholder="{ window.gettext("E.g. 58.7") }" value="{ state.editingRoad.getLinkLength() }" oninput="{ checkLinkLength }">
            <small class="form-text text-muted">{ window.gettext("Enter Link length (in Km)") }</small>
            <div if="{ invalidLinkLength && invalidLinkLength.length }" class="invalid-tooltip">
                <ul>
                    <li each="{ message in invalidLinkLength }">{ message }.</li>
                </ul>
            </div>
        </div>
        <div class="form-group">
            <label>{ window.gettext("Carriageway Width") }</label>
            <input class="{ invalidCarriageWidth && invalidCarriageWidth.length ? 'danger' : null } form-control inactive"
                type="number" placeholder="{ window.gettext("E.g. 5.0") }" value="{ state.editingRoad.getCarriagewayWidth() }" oninput="{ checkCarriagewayWidth }">
            <small class="form-text text-muted">{ window.gettext("Enter the width (in meters) of the link carriageway") }</small>
            <div if="{ invalidCarriageWidth && invalidCarriageWidth.length }" class="invalid-tooltip">
                <ul>
                    <li each="{ message in invalidCarriageWidth }">{ message }.</li>
                </ul>
            </div>
        </div>
    </section>

    <section>
        <h6>{ window.gettext("Link chainage") }</h6>
        <div class="form-group">
            <label>{ window.gettext("Link Start Chainage") }</label>
            <input class="{ invalidLinkStartChainage && invalidLinkStartChainage.length ? 'danger' : null } form-control inactive"
                type="number" placeholder="{ window.gettext("E.g. 0+000") }" value="{ state.editingRoad.getLinkStartChainage() }" oninput="{ checkLinkStartChainage }">
            <small class="form-text text-muted">{ window.gettext("Enter chainage for link starting point") }</small>
            <div if="{ invalidLinkStartChainage && invalidLinkStartChainage.length }" class="invalid-tooltip">
                <ul>
                    <li each="{ message in invalidLinkStartChainage }">{ message }.</li>
                </ul>
            </div>
        </div>
        <div class="form-group">
            <label>{ window.gettext("Link End Chainage") }</label>
            <input class="{ invalidLinkEndChainage && invalidLinkEndChainage.length ? 'danger' : null } form-control inactive"
                type="number" placeholder="{ window.gettext("E.g. 62+410") }" value="{ state.editingRoad.getLinkEndChainage() }" oninput="{ checkLinkEndChainage }">
            <small class="form-text text-muted">{ window.gettext("Enter chainage for link ending point") }</small>
            <div if="{ invalidLinkEndChainage && invalidLinkEndChainage.length }" class="invalid-tooltip">
                <ul>
                    <li each="{ message in invalidLinkEndChainage }">{ message }.</li>
                </ul>
            </div>
        </div>
    </section>

    <div class="button-wrapper d-flex justify-content-end">
        <button class="btn btn-primary" onclick="{ save }">{ window.gettext("Save and continue") }</button>
    </div>

    <script>
        import { saveRoad } from "../roadManager";
        import Edit_Feedback from './edit_feedback.riot';
        import { Road } from "../../protobuf/roads_pb";

        export default {
            components: {
                Edit_Feedback
            },
            state: {
                show_feedback: false,
                error: null,
            },
            onBeforeMount(props, state) {
                state.editingRoad = Road.deserializeBinary(props.road.serializeBinary());
            },
            save(e) {
                var save_button = e.currentTarget;
                save_button.disabled = true;
                setTimeout(() => save_button.disabled = false, 1000); // An example of what to call when the (unimplemented) Promise is resolved

                saveRoad(this.state.editingRoad).then((response) => {
                    if (response) { this.state.error = false; }
                    else { this.state.error = true; }
                }).catch(err => {
                    this.state.error = true;
                }).finally(() => {
                    this.state.show_feedback = true;
                    this.update()
                });
            },
            checkLinkCode(e) {
                let input = e.currentTarget.value.trim();
                this.invalidLinkCode = [];
                if (containsWhiteSpaces(input)) {
                    this.invalidLinkCode.push(`Link code cannot contain white spaces`);
                }
                this.state.editingRoad.setLinkCode(input);
                this.update();
            },
            checkLinkStartName(e) {
                this.state.editingRoad.setLinkStartName(e.currentTarget.value);
            },
            checkLinkEndName(e) {
                this.state.editingRoad.setLinkEndName(e.currentTarget.value);
            },
            checkLinkLength(e) {
                const linkLengthDecimals = 3;
                const linkLengthDigits = 8;
                let input = e.currentTarget.value;
                this.invalidLinkLength = [];
                if (exceedsMaxDigits(input, linkLengthDigits, linkLengthDecimals)) {
                    this.invalidLinkLength.push(`Link length cannot contain more than ${linkLengthDigits} digits, of which ${linkLengthDecimals} are decimals`);
                } else {
                    this.state.editingRoad.setLinkLength(input);
                }
                this.update();
            },
            checkCarriagewayWidth(e) {
                const carriagewayWidthDecimals = 3;
                const carriagewayWidthDigits = 5;
                let input = e.currentTarget.value;
                this.invalidCarriageWidth = [];
                if (exceedsMaxDigits(input, carriagewayWidthDigits, carriagewayWidthDecimals)) {
                    this.invalidCarriageWidth.push(`Carriage width cannot contain more than ${carriagewayWidthDigits} digits, of which ${carriagewayWidthDecimals} are decimals`);
                } else {
                    this.state.editingRoad.setCarriagewayWidth(input);
                }
                this.update();
            },
            checkLinkStartChainage(e) {
                const linkChainageDecimals = 5;
                const linkChainageDigits = 12;
                let input = e.currentTarget.value;
                this.invalidLinkStartChainage = [];
                if (exceedsMaxDigits(input, linkChainageDigits, linkChainageDecimals)) {
                    this.invalidLinkStartChainage.push(`Link start chainage cannot contain more than ${linkChainageDigits} digits, of which ${linkChainageDecimals} are decimals`);
                } else {
                    this.state.editingRoad.setLinkStartChainage(input);
                }
                this.update();
            },
            checkLinkEndChainage(e) {
                const linkChainageDecimals = 5;
                const linkChainageDigits = 12;
                let input = e.currentTarget.value;
                this.invalidLinkEndChainage = [];
                if (exceedsMaxDigits(input, linkChainageDigits, linkChainageDecimals)) {
                    this.invalidLinkEndChainage.push(`Link end chainage cannot contain more than ${linkChainageDigits} digits, of which ${linkChainageDecimals} are decimals`);
                } else {
                    this.state.editingRoad.setLinkEndChainage(input);
                }
                this.update();
            },
        };

        function containsWhiteSpaces(text) {
            return /\s/.test(text);
        }

        function exceedsMaxDigits(text, limit, decimals) {
            return !(new RegExp("^\\d{0," + (limit - decimals) + "}(\\.\\d{1," + decimals + "})?$").test(text));
        }
    </script>
</edit_asset_details>
