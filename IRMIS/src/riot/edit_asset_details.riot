<edit_asset_details>
    <h5>{ window.gettext('Asset') }</h5>

    <section>
        <h6>{ window.gettext('Link code and name') }</h6>
        <div class="form-group">
            <label>{ window.gettext('Link Code') }</label>
            <input class="{ invalidLinkCode && invalidLinkCode.length ? 'danger' : null } form-control inactive"
                type="text" maxlength="25" placeholder="{ window.gettext('E.g. A01-01') }" value={ linkCode } oninput="{ checkLinkCode }">
            <small class="form-text text-muted">{ window.gettext('Enter link code according to DRBFC standard') }</small>
            <div if="{ invalidLinkCode && invalidLinkCode.length }" class="invalid-tooltip">
                <ul>
                    <li each="{ message in invalidLinkCode }">{ message }.</li>
                </ul>
            </div>
        </div>
        <div class="form-group">
            <label>{ window.gettext('Link Start Name') }</label>
            <input class="form-control inactive" type="text" maxlength="150"
                placeholder="{ window.gettext('E.g. Dili') }" value={ linkStartName } oninput="{ checkStartName }">
            <small class="form-text text-muted">{ window.gettext('Enter the name of the link start location (municipal center, administrative post or nearest suco)') }</small>
        </div>
        <div class="form-group">
            <label>{ window.gettext('Link End Name') }</label>
            <input class="form-control inactive" type="text" maxlength="150"
                placeholder="{ window.gettext('E.g. Manatuto') }" value={ linkEndName } oninput="{ checkEndName }">
            <small class="form-text text-muted">{ window.gettext('Enter the name of the link end location (municipal center, administrative post or nearest suco)') }</small>
        </div>
    </section>

    <section>
        <h6>{ window.gettext('Link width and length') }</h6>
        <div class="form-group">
            <label>{ window.gettext('Link Length') }</label>
            <input class="{ invalidLinkLength && invalidLinkLength.length ? 'danger' : null } form-control inactive"
                type="number" placeholder="{ window.gettext('E.g. 58.7') }" value={ linkLength } oninput="{ checkLinkLength }">
            <small class="form-text text-muted">{ window.gettext('Enter road link length (in Km)') }</small>
            <div if="{ invalidLinkLength && invalidLinkLength.length }" class="invalid-tooltip">
                <ul>
                    <li each="{ message in invalidLinkLength }">{ message }.</li>
                </ul>
            </div>
        </div>
        <div class="form-group">
            <label>{ window.gettext('Carriageway Width') }</label>
            <input class="{ invalidCarriageWidth && invalidCarriageWidth.length ? 'danger' : null } form-control inactive"
                type="number" placeholder="{ window.gettext('E.g. 5.0') }" value={ carriagewayWidth } oninput="{ checkCarriagewayWidth }">
            <small class="form-text text-muted">{ window.gettext('Enter the width (in meters) of the link carriageway') }</small>
            <div if="{ invalidCarriageWidth && invalidCarriageWidth.length }" class="invalid-tooltip">
                <ul>
                    <li each="{ message in invalidCarriageWidth }">{ message }.</li>
                </ul>
            </div>
        </div>
    </section>

    <section>
        <h6>{ window.gettext('Link chainage') }</h6>
        <div class="form-group">
            <label>{ window.gettext('Link Start Chainage') }</label>
            <input class="{ invalidStartChainage && invalidStartChainage.length ? 'danger' : null } form-control inactive"
                type="number" placeholder="{ window.gettext('E.g. 0+000') }" value={ linkStartChainage } oninput="{ checkStartChainage }">
            <small class="form-text text-muted">{ window.gettext('Enter chainage for link starting point') }</small>
            <div if="{ invalidStartChainage && invalidStartChainage.length }" class="invalid-tooltip">
                <ul>
                    <li each="{ message in invalidStartChainage }">{ message }.</li>
                </ul>
            </div>
        </div>
        <div class="form-group">
            <label>{ window.gettext('Link End Chainage') }</label>
            <input class="{ invalidEndChainage && invalidEndChainage.length ? 'danger' : null } form-control inactive"
                type="number" placeholder="{ window.gettext('E.g. 62+410') }" value={ linkEndChainage } oninput="{ checkEndChainage }">
            <small class="form-text text-muted">{ window.gettext('Enter chainage for link ending point') }</small>
            <div if="{ invalidEndChainage && invalidEndChainage.length }" class="invalid-tooltip">
                <ul>
                    <li each="{ message in invalidEndChainage }">{ message }.</li>
                </ul>
            </div>
        </div>
    </section>

    <div class="button-wrapper d-flex justify-content-end">
        <button class="btn btn-primary" onclick="{ save }">{ window.gettext('Save and continue') }</button>
    </div>

    <script>
        import { saveRoad } from '../roadManager';

        export default {
            beforeMount() {
                this.linkLengthDecimals = 3;
                this.linkLengthDigits = 8;
                this.carriagewayWidthDecimals = 3;
                this.carriagewayWidthDigits = 5;
                this.linkChainageDecimals = 5;
                this.linkChainageDigits = 12;
            },
            onMounted(props, state) {
                this.roadId = props.road.getId();
                this.linkCode = props.road.getLinkCode();
                this.linkStartName = props.road.getLinkStartName();
                this.linkEndName = props.road.getLinkEndName();
                this.linkLength = props.road.getLinkLength();
                this.carriagewayWidth = props.road.getCarriagewayWidth();
                this.linkStartChainage = props.road.getLinkStartChainage();
                this.linkEndChainage = props.road.getLinkEndChainage();
                this.update();
            },
            checkLinkCode(e) {
                var input = e.currentTarget.value.trim();
                this.invalidLinkCode = [];
                if (containsWhiteSpaces(input)) {
                    this.invalidLinkCode.push("Link code can't contain white spaces");
                }
                this.linkCode = input;
                this.update();
            },
            checkStartName(e) {
                this.startName = e.currentTarget.value;
            },
            checkEndName(e) {
                this.endName = e.currentTarget.value;
            },
            checkLinkLength(e) {
                var input = e.currentTarget.value;
                this.invalidLinkLength = [];
                if (exceedsMaxDigits(input, this.linkLengthDigits, this.linkLengthDecimals)) {
                    this.invalidLinkLength.push("Link length can't contain more than " + this.linkLengthDigits + " digits, of which " + this.linkLengthDecimals + " are decimals");
                } else {
                    this.linkLength = input;
                }
                this.update();
            },
            checkCarriagewayWidth(e) {
                var input = e.currentTarget.value;
                this.invalidCarriageWidth = [];
                if (exceedsMaxDigits(this.carriagewayWidth, this.carriagewayWidthDigits, this.carriagewayWidthDecimals)) {
                    this.invalidCarriageWidth.push("Carriage width can't contain more than " + this.carriagewayWidthDigits + " digits, of which " + this.carriagewayWidthDecimals + " are decimals");
                } else {
                    this.carriagewayWidth = input;
                }
                this.update();
            },
            checkLinkStartChainage(e) {
                var input = e.currentTarget.value;
                this.invalidLinkStartChainage = [];
                if (exceedsMaxDigits(this.linkStartChainage, this.linkChainageDigits, this.linkChainageDecimals)) {
                    this.invalidLinkStartChainage.push("Link start chainage can't contain more than " + this.linkChainageDigits + " digits, of which " + this.linkChainageDecimals + " are decimals");
                } else {
                    this.linkStartChainage = input;
                }
                this.update();
            },
            checkLinkEndChainage(e) {
                var input = e.currentTarget.value;
                this.invalidEndChainage = [];
                if (exceedsMaxDigits(this.linkEndChainage, this.linkChainageDigits, this.linkChainageDecimals)) {
                    this.invalidLinkEndChainage.push("Link end chainage can't contain more than " + this.linkChainageDigits + " digits, of which " + this.linkChainageDecimals + " are decimals");
                } else {
                    this.linkEndChainage = input;
                }
                this.update();
            },
            save(e) {
                const road = {
                    id: this.roadId,
                    linkCode: this.linkCode,
                    linkStartName: this.linkStartName,
                    linkEndName: this.linkEndName,
                    linkLength: this.linkLength,
                    carriagewayWidth: this.carriagewayWidth,
                    linkStartChainage: this.linkStartChainage,
                    linkEndChainage: this.linkEndChainage,
                };
                saveRoad(road).then( () => {
                    alert('road saved');
                }).catch(err => {
                    alert('road save failed');
                }).finally(() => {
                    this.update()
                });
            }
        };

        function containsWhiteSpaces(text) {
            return /\s/.test(text);
        }

        function exceedsMaxDigits(text, limit, decimals) {
            return !(new RegExp("^\\d{0," + (limit - decimals) + "}(\\.\\d{1," + decimals + "})?$").test(text));
        }
    </script>
</edit_asset_details>
