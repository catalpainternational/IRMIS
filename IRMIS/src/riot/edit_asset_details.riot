<edit_asset_details>
    <h5>{ window.gettext("Asset") }</h5>

    <section>
        <h6>{ window.gettext("Link code and name") }</h6>
        <div class="form-group">
            <label>{ link_code.display }</label>
            <input class="{ invalidLinkCode && invalidLinkCode.length ? 'danger' : null } { props.road.getLinkCode() ? '' : 'inactive' } form-control"
                type="text" maxlength="25" placeholder="{ window.gettext('E.g. A01-01') }" value="{ props.road.getLinkCode() }" oninput="{ checkLinkCode }">
            <small class="form-text text-muted">{ window.gettext("Enter link code according to DRBFC standard") }</small>
            <div if="{ invalidLinkCode && invalidLinkCode.length }" class="invalid-tooltip">
                <ul>
                    <li each="{ message in invalidLinkCode }">{ message }.</li>
                </ul>
            </div>
        </div>
        <div class="form-group">
            <label>{ link_start_name.display }</label>
            <input class="{ props.road.getLinkStartName() ? '' : 'inactive' } form-control" type="text" maxlength="150"
                placeholder="{ window.gettext('E.g. Dili') }" value="{ props.road.getLinkStartName() }" oninput="{ checkLinkStartName }">
            <small class="form-text text-muted">{ window.gettext("Enter the name of the link start location (municipal center, administrative post or nearest suco)") }</small>
        </div>
        <div class="form-group">
            <label>{ link_end_name.display }</label>
            <input class="{ props.road.getLinkEndName() ? '' : 'inactive' } form-control" type="text" maxlength="150"
                placeholder="{ window.gettext('E.g. Manatuto') }" value="{ props.road.getLinkEndName() }" oninput="{ checkLinkEndName }">
            <small class="form-text text-muted">{ window.gettext("Enter the name of the link end location (municipal center, administrative post or nearest suco)") }</small>
        </div>
    </section>

    <section>
        <h6>{ window.gettext("Link width and length") }</h6>
        <div class="form-group">
            <label>{ link_length.display }</label>
            <input class="{ invalidLinkLength && invalidLinkLength.length ? 'danger' : null } { props.road.getLinkLength() ? '' : 'inactive' } form-control"
                type="number" placeholder="{ window.gettext('E.g. 58.7') }" value="{ props.road.getLinkLength() }" oninput="{ checkLinkLength }">
            <small class="form-text text-muted">{ window.gettext("Enter road link length (in Km)") }</small>
            <div if="{ invalidLinkLength && invalidLinkLength.length }" class="invalid-tooltip">
                <ul>
                    <li each="{ message in invalidLinkLength }">{ message }.</li>
                </ul>
            </div>
        </div>
        <div class="form-group">
            <label>{ carriageway_width.display }</label>
            <input class="{ invalidCarriageWidth && invalidCarriageWidth.length ? 'danger' : null } { props.road.getCarriagewayWidth() ? '' : 'inactive' } form-control"
                type="number" placeholder="{ window.gettext('E.g. 5.0') }" value="{ props.road.getCarriagewayWidth() }" oninput="{ checkCarriagewayWidth }">
            <small class="form-text text-muted">{ window.gettext("Enter the width (in meters) of the link carriageway") }</small>
            <div if="{ invalidCarriageWidth && invalidCarriageWidth.length }" class="invalid-tooltip">
                <ul>
                    <li each="{ message in invalidCarriageWidth }">{ message }.</li>
                </ul>
            </div>
        </div>
    </section>

    <section>
        <h6>{ window.gettext("Link chainage") }</h6>
        <div class="form-group">
            <label>{ link_start_chainage.display }</label>
            <input class="{ invalidLinkStartChainage && invalidLinkStartChainage.length ? 'danger' : null } { props.road.getLinkStartChainage() ? '' : 'inactive' } form-control"
                type="number" placeholder="{ window.gettext('E.g. 0+000') }" value="{ props.road.getLinkStartChainage() }" oninput="{ checkLinkStartChainage }">
            <small class="form-text text-muted">{ window.gettext("Enter chainage for link starting point") }</small>
            <div if="{ invalidLinkStartChainage && invalidLinkStartChainage.length }" class="invalid-tooltip">
                <ul>
                    <li each="{ message in invalidLinkStartChainage }">{ message }.</li>
                </ul>
            </div>
        </div>
        <div class="form-group">
            <label>{ link_end_chainage.display }</label>
            <input class="{ invalidLinkEndChainage && invalidLinkEndChainage.length ? 'danger' : null } { props.road.getLinkEndChainage() ? '' : 'inactive' } form-control"
                type="number" placeholder="{ window.gettext('E.g. 62+410') }" value="{ props.road.getLinkEndChainage() }" oninput="{ checkLinkEndChainage }">
            <small class="form-text text-muted">{ window.gettext("Enter chainage for link ending point") }</small>
            <div if="{ invalidLinkEndChainage && invalidLinkEndChainage.length }" class="invalid-tooltip">
                <ul>
                    <li each="{ message in invalidLinkEndChainage }">{ message }.</li>
                </ul>
            </div>
        </div>
    </section>

    <div class="button-wrapper d-flex justify-content-end">
        <button class="btn btn-primary" onclick="{ save }" disabled="{ props.saving }">{ window.gettext("Save and continue") }</button>
    </div>

    <script>

        export default {
            save(e) {
                this.props.onSave();
            },
            checkLinkCode(e) {
                let input = e.currentTarget.value.trim();
                this.invalidLinkCode = [];
                if (containsWhiteSpaces(input)) {
                    this.invalidLinkCode.push(`Link code cannot contain white spaces`);
                }
                this.props.road.setLinkCode(input);
                this.update();
            },
            checkLinkStartName(e) {
                this.props.road.setLinkStartName(e.currentTarget.value);
                this.update();
            },
            checkLinkEndName(e) {
                this.props.road.setLinkEndName(e.currentTarget.value);
                this.update();
            },
            checkLinkLength(e) {
                const linkLengthDecimals = 3;
                const linkLengthDigits = 8;
                let input = e.currentTarget.value;
                this.invalidLinkLength = [];
                if (exceedsMaxDigits(input, linkLengthDigits, linkLengthDecimals)) {
                    this.invalidLinkLength.push(`Link length cannot contain more than ${linkLengthDigits} digits, of which ${linkLengthDecimals} are decimals`);
                } else {
                    this.props.road.setLinkLength(input);
                }
                this.update();
            },
            checkCarriagewayWidth(e) {
                const carriagewayWidthDecimals = 3;
                const carriagewayWidthDigits = 5;
                let input = e.currentTarget.value;
                this.invalidCarriageWidth = [];
                if (exceedsMaxDigits(input, carriagewayWidthDigits, carriagewayWidthDecimals)) {
                    this.invalidCarriageWidth.push(`Carriage width cannot contain more than ${carriagewayWidthDigits} digits, of which ${carriagewayWidthDecimals} are decimals`);
                } else {
                    this.props.road.setCarriagewayWidth(input);
                }
                this.update();
            },
            checkLinkStartChainage(e) {
                const linkChainageDecimals = 5;
                const linkChainageDigits = 12;
                let input = e.currentTarget.value;
                this.invalidLinkStartChainage = [];
                if (exceedsMaxDigits(input, linkChainageDigits, linkChainageDecimals)) {
                    this.invalidLinkStartChainage.push(`Link start chainage cannot contain more than ${linkChainageDigits} digits, of which ${linkChainageDecimals} are decimals`);
                } else {
                    this.props.road.setLinkStartChainage(input);
                }
                this.update();
            },
            checkLinkEndChainage(e) {
                const linkChainageDecimals = 5;
                const linkChainageDigits = 12;
                let input = e.currentTarget.value;
                this.invalidLinkEndChainage = [];
                if (exceedsMaxDigits(input, linkChainageDigits, linkChainageDecimals)) {
                    this.invalidLinkEndChainage.push(`Link end chainage cannot contain more than ${linkChainageDigits} digits, of which ${linkChainageDecimals} are decimals`);
                } else {
                    this.props.road.setLinkEndChainage(input);
                }
                this.update();
            },
            link_code: window.road_schema.link_code,
            link_start_name: window.road_schema.link_start_name,
            link_end_name: window.road_schema.link_end_name,
            link_length: window.road_schema.link_length,
            carriageway_width: window.road_schema.carriageway_width,
            link_start_chainage: window.road_schema.link_start_chainage,
            link_end_chainage: window.road_schema.link_end_chainage,
        };

        function containsWhiteSpaces(text) {
            return /\s/.test(text);
        }

        function exceedsMaxDigits(text, limit, decimals) {
            return !(new RegExp("^\\d{0," + (limit - decimals) + "}(\\.\\d{1," + decimals + "})?$").test(text));
        }
    </script>
</edit_asset_details>
