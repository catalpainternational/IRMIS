/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.assets.Plan', null, global);
goog.exportSymbol('proto.assets.PlanSnapshots', null, global);
goog.exportSymbol('proto.assets.Plans', null, global);
goog.exportSymbol('proto.assets.Snapshot', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.assets.Snapshot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.assets.Snapshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.assets.Snapshot.displayName = 'proto.assets.Snapshot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.assets.Plan = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.assets.Plan.repeatedFields_, null);
};
goog.inherits(proto.assets.Plan, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.assets.Plan.displayName = 'proto.assets.Plan';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.assets.Plans = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.assets.Plans.repeatedFields_, null);
};
goog.inherits(proto.assets.Plans, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.assets.Plans.displayName = 'proto.assets.Plans';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.assets.PlanSnapshots = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.assets.PlanSnapshots.repeatedFields_, null);
};
goog.inherits(proto.assets.PlanSnapshots, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.assets.PlanSnapshots.displayName = 'proto.assets.PlanSnapshots';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.assets.Snapshot.prototype.toObject = function(opt_includeInstance) {
  return proto.assets.Snapshot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.assets.Snapshot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assets.Snapshot.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    year: jspb.Message.getFieldWithDefault(msg, 2, 0),
    budget: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    length: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    assetClass: jspb.Message.getFieldWithDefault(msg, 5, ""),
    workType: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.assets.Snapshot}
 */
proto.assets.Snapshot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.assets.Snapshot;
  return proto.assets.Snapshot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.assets.Snapshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.assets.Snapshot}
 */
proto.assets.Snapshot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setYear(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBudget(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLength(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetClass(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.assets.Snapshot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.assets.Snapshot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.assets.Snapshot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assets.Snapshot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getYear();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getBudget();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getLength();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getAssetClass();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getWorkType();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.assets.Snapshot.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.assets.Snapshot.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 year = 2;
 * @return {number}
 */
proto.assets.Snapshot.prototype.getYear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.assets.Snapshot.prototype.setYear = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional float budget = 3;
 * @return {number}
 */
proto.assets.Snapshot.prototype.getBudget = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.assets.Snapshot.prototype.setBudget = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float length = 4;
 * @return {number}
 */
proto.assets.Snapshot.prototype.getLength = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.assets.Snapshot.prototype.setLength = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional string asset_class = 5;
 * @return {string}
 */
proto.assets.Snapshot.prototype.getAssetClass = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.assets.Snapshot.prototype.setAssetClass = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string work_type = 6;
 * @return {string}
 */
proto.assets.Snapshot.prototype.getWorkType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.assets.Snapshot.prototype.setWorkType = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.assets.Plan.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.assets.Plan.prototype.toObject = function(opt_includeInstance) {
  return proto.assets.Plan.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.assets.Plan} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assets.Plan.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    title: jspb.Message.getFieldWithDefault(msg, 2, ""),
    file: msg.getFile_asB64(),
    user: jspb.Message.getFieldWithDefault(msg, 4, 0),
    addedBy: jspb.Message.getFieldWithDefault(msg, 5, ""),
    lastModified: (f = msg.getLastModified()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    dateCreated: (f = msg.getDateCreated()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    approved: jspb.Message.getFieldWithDefault(msg, 8, false),
    assetClass: jspb.Message.getFieldWithDefault(msg, 9, ""),
    summaryList: jspb.Message.toObjectList(msg.getSummaryList(),
    proto.assets.Snapshot.toObject, includeInstance),
    url: jspb.Message.getFieldWithDefault(msg, 11, ""),
    fileName: jspb.Message.getFieldWithDefault(msg, 12, ""),
    planningPeriod: jspb.Message.getFieldWithDefault(msg, 13, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.assets.Plan}
 */
proto.assets.Plan.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.assets.Plan;
  return proto.assets.Plan.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.assets.Plan} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.assets.Plan}
 */
proto.assets.Plan.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFile(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUser(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddedBy(value);
      break;
    case 6:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setLastModified(value);
      break;
    case 7:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setDateCreated(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApproved(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetClass(value);
      break;
    case 10:
      var value = new proto.assets.Snapshot;
      reader.readMessage(value,proto.assets.Snapshot.deserializeBinaryFromReader);
      msg.addSummary(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setFileName(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlanningPeriod(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.assets.Plan.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.assets.Plan.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.assets.Plan} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assets.Plan.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFile_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getUser();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getAddedBy();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getLastModified();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getDateCreated();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getApproved();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getAssetClass();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getSummaryList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.assets.Snapshot.serializeBinaryToWriter
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getFileName();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getPlanningPeriod();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.assets.Plan.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.assets.Plan.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string title = 2;
 * @return {string}
 */
proto.assets.Plan.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.assets.Plan.prototype.setTitle = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes file = 3;
 * @return {!(string|Uint8Array)}
 */
proto.assets.Plan.prototype.getFile = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes file = 3;
 * This is a type-conversion wrapper around `getFile()`
 * @return {string}
 */
proto.assets.Plan.prototype.getFile_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFile()));
};


/**
 * optional bytes file = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFile()`
 * @return {!Uint8Array}
 */
proto.assets.Plan.prototype.getFile_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFile()));
};


/** @param {!(string|Uint8Array)} value */
proto.assets.Plan.prototype.setFile = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional uint32 user = 4;
 * @return {number}
 */
proto.assets.Plan.prototype.getUser = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.assets.Plan.prototype.setUser = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string added_by = 5;
 * @return {string}
 */
proto.assets.Plan.prototype.getAddedBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.assets.Plan.prototype.setAddedBy = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional google.protobuf.Timestamp last_modified = 6;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.assets.Plan.prototype.getLastModified = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 6));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.assets.Plan.prototype.setLastModified = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.assets.Plan.prototype.clearLastModified = function() {
  this.setLastModified(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.assets.Plan.prototype.hasLastModified = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional google.protobuf.Timestamp date_created = 7;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.assets.Plan.prototype.getDateCreated = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 7));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.assets.Plan.prototype.setDateCreated = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.assets.Plan.prototype.clearDateCreated = function() {
  this.setDateCreated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.assets.Plan.prototype.hasDateCreated = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool approved = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.assets.Plan.prototype.getApproved = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.assets.Plan.prototype.setApproved = function(value) {
  jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional string asset_class = 9;
 * @return {string}
 */
proto.assets.Plan.prototype.getAssetClass = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.assets.Plan.prototype.setAssetClass = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * repeated Snapshot summary = 10;
 * @return {!Array<!proto.assets.Snapshot>}
 */
proto.assets.Plan.prototype.getSummaryList = function() {
  return /** @type{!Array<!proto.assets.Snapshot>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.assets.Snapshot, 10));
};


/** @param {!Array<!proto.assets.Snapshot>} value */
proto.assets.Plan.prototype.setSummaryList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.assets.Snapshot=} opt_value
 * @param {number=} opt_index
 * @return {!proto.assets.Snapshot}
 */
proto.assets.Plan.prototype.addSummary = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.assets.Snapshot, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.assets.Plan.prototype.clearSummaryList = function() {
  this.setSummaryList([]);
};


/**
 * optional string url = 11;
 * @return {string}
 */
proto.assets.Plan.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.assets.Plan.prototype.setUrl = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string file_name = 12;
 * @return {string}
 */
proto.assets.Plan.prototype.getFileName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.assets.Plan.prototype.setFileName = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string planning_period = 13;
 * @return {string}
 */
proto.assets.Plan.prototype.getPlanningPeriod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.assets.Plan.prototype.setPlanningPeriod = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.assets.Plans.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.assets.Plans.prototype.toObject = function(opt_includeInstance) {
  return proto.assets.Plans.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.assets.Plans} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assets.Plans.toObject = function(includeInstance, msg) {
  var f, obj = {
    plansList: jspb.Message.toObjectList(msg.getPlansList(),
    proto.assets.Plan.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.assets.Plans}
 */
proto.assets.Plans.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.assets.Plans;
  return proto.assets.Plans.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.assets.Plans} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.assets.Plans}
 */
proto.assets.Plans.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.assets.Plan;
      reader.readMessage(value,proto.assets.Plan.deserializeBinaryFromReader);
      msg.addPlans(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.assets.Plans.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.assets.Plans.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.assets.Plans} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assets.Plans.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlansList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.assets.Plan.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Plan plans = 1;
 * @return {!Array<!proto.assets.Plan>}
 */
proto.assets.Plans.prototype.getPlansList = function() {
  return /** @type{!Array<!proto.assets.Plan>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.assets.Plan, 1));
};


/** @param {!Array<!proto.assets.Plan>} value */
proto.assets.Plans.prototype.setPlansList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.assets.Plan=} opt_value
 * @param {number=} opt_index
 * @return {!proto.assets.Plan}
 */
proto.assets.Plans.prototype.addPlans = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.assets.Plan, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.assets.Plans.prototype.clearPlansList = function() {
  this.setPlansList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.assets.PlanSnapshots.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.assets.PlanSnapshots.prototype.toObject = function(opt_includeInstance) {
  return proto.assets.PlanSnapshots.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.assets.PlanSnapshots} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assets.PlanSnapshots.toObject = function(includeInstance, msg) {
  var f, obj = {
    snapshotsList: jspb.Message.toObjectList(msg.getSnapshotsList(),
    proto.assets.Snapshot.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.assets.PlanSnapshots}
 */
proto.assets.PlanSnapshots.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.assets.PlanSnapshots;
  return proto.assets.PlanSnapshots.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.assets.PlanSnapshots} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.assets.PlanSnapshots}
 */
proto.assets.PlanSnapshots.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.assets.Snapshot;
      reader.readMessage(value,proto.assets.Snapshot.deserializeBinaryFromReader);
      msg.addSnapshots(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.assets.PlanSnapshots.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.assets.PlanSnapshots.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.assets.PlanSnapshots} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assets.PlanSnapshots.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSnapshotsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.assets.Snapshot.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Snapshot snapshots = 1;
 * @return {!Array<!proto.assets.Snapshot>}
 */
proto.assets.PlanSnapshots.prototype.getSnapshotsList = function() {
  return /** @type{!Array<!proto.assets.Snapshot>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.assets.Snapshot, 1));
};


/** @param {!Array<!proto.assets.Snapshot>} value */
proto.assets.PlanSnapshots.prototype.setSnapshotsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.assets.Snapshot=} opt_value
 * @param {number=} opt_index
 * @return {!proto.assets.Snapshot}
 */
proto.assets.PlanSnapshots.prototype.addSnapshots = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.assets.Snapshot, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.assets.PlanSnapshots.prototype.clearSnapshotsList = function() {
  this.setSnapshotsList([]);
};


goog.object.extend(exports, proto.assets);
